Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence_groups
Rule 2     sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS
Rule 3     sentence_groups -> OPBR EOS sentence_group CLBR EOS
Rule 4     sentence_groups -> OPBR EOS sentence_group CLBR
Rule 5     sentence_groups -> EOS OPBR EOS sentence_group CLBR
Rule 6     sentence_groups -> EOS sentence
Rule 7     sentence_groups -> sentence
Rule 8     sentence_group -> sentence_group sentence
Rule 9     sentence_group -> sentence
Rule 10    sentence -> definition EOS
Rule 11    sentence -> if
Rule 12    sentence -> while
Rule 13    sentence -> if_err
Rule 14    sentence -> while_err
Rule 15    sentence -> procedure
Rule 16    sentence -> call_procedure EOS
Rule 17    sentence -> robot_command EOS
Rule 18    sentence -> map_setting EOS
Rule 19    sentence -> error
Rule 20    definition -> INT VARIABLE EQUAL math_expr
Rule 21    definition -> CINT VARIABLE EQUAL math_expr
Rule 22    definition -> BOOLEAN VARIABLE EQUAL logic_expr
Rule 23    definition -> CBOOLEAN VARIABLE EQUAL logic_expr
Rule 24    definition -> VARIABLE ASSIGN math_expr
Rule 25    definition -> VARIABLE ASSIGN logic_expr
Rule 26    definition -> MAP VARIABLE
Rule 27    math_expr -> INC math_first math_second
Rule 28    math_expr -> DEC math_first math_second
Rule 29    math_expr -> math_cmd empty
Rule 30    math_expr -> VARIABLE
Rule 31    math_expr -> number empty
Rule 32    number -> NUM
Rule 33    bool -> TRUE
Rule 34    bool -> FALSE
Rule 35    math_first -> math_expr
Rule 36    math_first -> call_procedure
Rule 37    math_second -> math_first
Rule 38    math_second -> logic_expr
Rule 39    logic_expr -> NOT logic_expr
Rule 40    logic_expr -> NOT call_procedure
Rule 41    logic_expr -> OR or_elem or_elem
Rule 42    logic_expr -> GT math_expr math_expr
Rule 43    logic_expr -> LT math_expr math_expr
Rule 44    logic_expr -> logic_cmd
Rule 45    logic_expr -> bool
Rule 46    or_elem -> logic_expr
Rule 47    or_elem -> call_procedure
Rule 48    procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups
Rule 49    proc_name -> PROC VARIABLE
Rule 50    call_procedure -> VARIABLE OPSQBR varlist CLSQBR
Rule 51    varlist -> varlist VARIABLE
Rule 52    varlist -> VARIABLE
Rule 53    if_err -> IF error sentence_groups ELSE sentence_groups
Rule 54    if_err -> IF error sentence_groups
Rule 55    while_err -> WHILE error DO sentence_groups
Rule 56    while_err -> WHILE error
Rule 57    while_err -> WHILE logic_expr error
Rule 58    if -> IF logic_expr sentence_groups ELSE sentence_groups
Rule 59    if -> IF logic_expr sentence_groups
Rule 60    while -> WHILE logic_expr DO sentence_groups
Rule 61    robot_command -> logic_cmd
Rule 62    robot_command -> rot_dir
Rule 63    robot_command -> math_cmd
Rule 64    rot_dir -> BACK
Rule 65    rot_dir -> RIGHT
Rule 66    rot_dir -> LEFT
Rule 67    logic_cmd -> STEP
Rule 68    math_cmd -> LOOK
Rule 69    map_setting -> BAR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
Rule 70    map_setting -> EMP OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
Rule 71    map_setting -> SET OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
Rule 72    map_setting -> CLR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
Rule 73    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 24 25
BACK                 : 64
BAR                  : 69
BOOLEAN              : 22
CBOOLEAN             : 23
CINT                 : 21
CLBR                 : 2 3 4 5
CLR                  : 72
CLSQBR               : 48 50 69 70 71 72
DEC                  : 28
DO                   : 55 60
ELSE                 : 53 58
EMP                  : 70
EOS                  : 2 2 2 3 3 4 5 5 6 10 16 17 18
EQUAL                : 20 21 22 23
FALSE                : 34
GT                   : 42
IF                   : 53 54 58 59
INC                  : 27
INT                  : 20
LEFT                 : 66
LOOK                 : 68
LT                   : 43
MAP                  : 26
NOT                  : 39 40
NUM                  : 32
OPBR                 : 2 3 4 5
OPSQBR               : 48 50 69 70 71 72
OR                   : 41
PROC                 : 49
RIGHT                : 65
SET                  : 71
STEP                 : 67
TRUE                 : 33
VARIABLE             : 20 21 22 23 24 25 26 30 49 50 51 52 69 69 70 70 71 71 72 72
WHILE                : 55 56 57 60
error                : 19 53 54 55 56 57

Nonterminals, with rules where they appear

bool                 : 45
call_procedure       : 16 36 40 47
definition           : 10
empty                : 29 31
if                   : 11
if_err               : 13
logic_cmd            : 44 61
logic_expr           : 22 23 25 38 39 46 57 58 59 60
map_setting          : 18
math_cmd             : 29 63
math_expr            : 20 21 24 35 42 42 43 43 69 69 70 70 71 71 72 72
math_first           : 27 28 37
math_second          : 27 28
number               : 31
or_elem              : 41 41
proc_name            : 48
procedure            : 15
program              : 0
robot_command        : 17
rot_dir              : 62
sentence             : 6 7 8 9
sentence_group       : 2 3 4 5 8
sentence_groups      : 1 48 53 53 54 55 58 58 59 60
varlist              : 48 50 51
while                : 12
while_err            : 14

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence_groups
    (2) sentence_groups -> . EOS OPBR EOS sentence_group CLBR EOS
    (3) sentence_groups -> . OPBR EOS sentence_group CLBR EOS
    (4) sentence_groups -> . OPBR EOS sentence_group CLBR
    (5) sentence_groups -> . EOS OPBR EOS sentence_group CLBR
    (6) sentence_groups -> . EOS sentence
    (7) sentence_groups -> . sentence
    (10) sentence -> . definition EOS
    (11) sentence -> . if
    (12) sentence -> . while
    (13) sentence -> . if_err
    (14) sentence -> . while_err
    (15) sentence -> . procedure
    (16) sentence -> . call_procedure EOS
    (17) sentence -> . robot_command EOS
    (18) sentence -> . map_setting EOS
    (19) sentence -> . error
    (20) definition -> . INT VARIABLE EQUAL math_expr
    (21) definition -> . CINT VARIABLE EQUAL math_expr
    (22) definition -> . BOOLEAN VARIABLE EQUAL logic_expr
    (23) definition -> . CBOOLEAN VARIABLE EQUAL logic_expr
    (24) definition -> . VARIABLE ASSIGN math_expr
    (25) definition -> . VARIABLE ASSIGN logic_expr
    (26) definition -> . MAP VARIABLE
    (58) if -> . IF logic_expr sentence_groups ELSE sentence_groups
    (59) if -> . IF logic_expr sentence_groups
    (60) while -> . WHILE logic_expr DO sentence_groups
    (53) if_err -> . IF error sentence_groups ELSE sentence_groups
    (54) if_err -> . IF error sentence_groups
    (55) while_err -> . WHILE error DO sentence_groups
    (56) while_err -> . WHILE error
    (57) while_err -> . WHILE logic_expr error
    (48) procedure -> . proc_name OPSQBR varlist CLSQBR sentence_groups
    (50) call_procedure -> . VARIABLE OPSQBR varlist CLSQBR
    (61) robot_command -> . logic_cmd
    (62) robot_command -> . rot_dir
    (63) robot_command -> . math_cmd
    (69) map_setting -> . BAR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (70) map_setting -> . EMP OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (71) map_setting -> . SET OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (72) map_setting -> . CLR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (49) proc_name -> . PROC VARIABLE
    (67) logic_cmd -> . STEP
    (64) rot_dir -> . BACK
    (65) rot_dir -> . RIGHT
    (66) rot_dir -> . LEFT
    (68) math_cmd -> . LOOK

    EOS             shift and go to state 3
    OPBR            shift and go to state 4
    error           shift and go to state 15
    INT             shift and go to state 16
    CINT            shift and go to state 18
    BOOLEAN         shift and go to state 19
    CBOOLEAN        shift and go to state 20
    VARIABLE        shift and go to state 17
    MAP             shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    BAR             shift and go to state 28
    EMP             shift and go to state 29
    SET             shift and go to state 30
    CLR             shift and go to state 31
    PROC            shift and go to state 32
    STEP            shift and go to state 33
    BACK            shift and go to state 34
    RIGHT           shift and go to state 35
    LEFT            shift and go to state 36
    LOOK            shift and go to state 37

    program                        shift and go to state 1
    sentence_groups                shift and go to state 2
    sentence                       shift and go to state 5
    definition                     shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    if_err                         shift and go to state 9
    while_err                      shift and go to state 10
    procedure                      shift and go to state 11
    call_procedure                 shift and go to state 12
    robot_command                  shift and go to state 13
    map_setting                    shift and go to state 14
    proc_name                      shift and go to state 24
    logic_cmd                      shift and go to state 25
    rot_dir                        shift and go to state 26
    math_cmd                       shift and go to state 27

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence_groups .

    $end            reduce using rule 1 (program -> sentence_groups .)


state 3

    (2) sentence_groups -> EOS . OPBR EOS sentence_group CLBR EOS
    (5) sentence_groups -> EOS . OPBR EOS sentence_group CLBR
    (6) sentence_groups -> EOS . sentence
    (10) sentence -> . definition EOS
    (11) sentence -> . if
    (12) sentence -> . while
    (13) sentence -> . if_err
    (14) sentence -> . while_err
    (15) sentence -> . procedure
    (16) sentence -> . call_procedure EOS
    (17) sentence -> . robot_command EOS
    (18) sentence -> . map_setting EOS
    (19) sentence -> . error
    (20) definition -> . INT VARIABLE EQUAL math_expr
    (21) definition -> . CINT VARIABLE EQUAL math_expr
    (22) definition -> . BOOLEAN VARIABLE EQUAL logic_expr
    (23) definition -> . CBOOLEAN VARIABLE EQUAL logic_expr
    (24) definition -> . VARIABLE ASSIGN math_expr
    (25) definition -> . VARIABLE ASSIGN logic_expr
    (26) definition -> . MAP VARIABLE
    (58) if -> . IF logic_expr sentence_groups ELSE sentence_groups
    (59) if -> . IF logic_expr sentence_groups
    (60) while -> . WHILE logic_expr DO sentence_groups
    (53) if_err -> . IF error sentence_groups ELSE sentence_groups
    (54) if_err -> . IF error sentence_groups
    (55) while_err -> . WHILE error DO sentence_groups
    (56) while_err -> . WHILE error
    (57) while_err -> . WHILE logic_expr error
    (48) procedure -> . proc_name OPSQBR varlist CLSQBR sentence_groups
    (50) call_procedure -> . VARIABLE OPSQBR varlist CLSQBR
    (61) robot_command -> . logic_cmd
    (62) robot_command -> . rot_dir
    (63) robot_command -> . math_cmd
    (69) map_setting -> . BAR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (70) map_setting -> . EMP OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (71) map_setting -> . SET OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (72) map_setting -> . CLR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (49) proc_name -> . PROC VARIABLE
    (67) logic_cmd -> . STEP
    (64) rot_dir -> . BACK
    (65) rot_dir -> . RIGHT
    (66) rot_dir -> . LEFT
    (68) math_cmd -> . LOOK

    OPBR            shift and go to state 38
    error           shift and go to state 15
    INT             shift and go to state 16
    CINT            shift and go to state 18
    BOOLEAN         shift and go to state 19
    CBOOLEAN        shift and go to state 20
    VARIABLE        shift and go to state 17
    MAP             shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    BAR             shift and go to state 28
    EMP             shift and go to state 29
    SET             shift and go to state 30
    CLR             shift and go to state 31
    PROC            shift and go to state 32
    STEP            shift and go to state 33
    BACK            shift and go to state 34
    RIGHT           shift and go to state 35
    LEFT            shift and go to state 36
    LOOK            shift and go to state 37

    sentence                       shift and go to state 39
    definition                     shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    if_err                         shift and go to state 9
    while_err                      shift and go to state 10
    procedure                      shift and go to state 11
    call_procedure                 shift and go to state 12
    robot_command                  shift and go to state 13
    map_setting                    shift and go to state 14
    proc_name                      shift and go to state 24
    logic_cmd                      shift and go to state 25
    rot_dir                        shift and go to state 26
    math_cmd                       shift and go to state 27

state 4

    (3) sentence_groups -> OPBR . EOS sentence_group CLBR EOS
    (4) sentence_groups -> OPBR . EOS sentence_group CLBR

    EOS             shift and go to state 40


state 5

    (7) sentence_groups -> sentence .

    $end            reduce using rule 7 (sentence_groups -> sentence .)
    ELSE            reduce using rule 7 (sentence_groups -> sentence .)
    CLBR            reduce using rule 7 (sentence_groups -> sentence .)
    error           reduce using rule 7 (sentence_groups -> sentence .)
    INT             reduce using rule 7 (sentence_groups -> sentence .)
    CINT            reduce using rule 7 (sentence_groups -> sentence .)
    BOOLEAN         reduce using rule 7 (sentence_groups -> sentence .)
    CBOOLEAN        reduce using rule 7 (sentence_groups -> sentence .)
    VARIABLE        reduce using rule 7 (sentence_groups -> sentence .)
    MAP             reduce using rule 7 (sentence_groups -> sentence .)
    IF              reduce using rule 7 (sentence_groups -> sentence .)
    WHILE           reduce using rule 7 (sentence_groups -> sentence .)
    BAR             reduce using rule 7 (sentence_groups -> sentence .)
    EMP             reduce using rule 7 (sentence_groups -> sentence .)
    SET             reduce using rule 7 (sentence_groups -> sentence .)
    CLR             reduce using rule 7 (sentence_groups -> sentence .)
    PROC            reduce using rule 7 (sentence_groups -> sentence .)
    STEP            reduce using rule 7 (sentence_groups -> sentence .)
    BACK            reduce using rule 7 (sentence_groups -> sentence .)
    RIGHT           reduce using rule 7 (sentence_groups -> sentence .)
    LEFT            reduce using rule 7 (sentence_groups -> sentence .)
    LOOK            reduce using rule 7 (sentence_groups -> sentence .)


state 6

    (10) sentence -> definition . EOS

    EOS             shift and go to state 41


state 7

    (11) sentence -> if .

    $end            reduce using rule 11 (sentence -> if .)
    ELSE            reduce using rule 11 (sentence -> if .)
    CLBR            reduce using rule 11 (sentence -> if .)
    error           reduce using rule 11 (sentence -> if .)
    INT             reduce using rule 11 (sentence -> if .)
    CINT            reduce using rule 11 (sentence -> if .)
    BOOLEAN         reduce using rule 11 (sentence -> if .)
    CBOOLEAN        reduce using rule 11 (sentence -> if .)
    VARIABLE        reduce using rule 11 (sentence -> if .)
    MAP             reduce using rule 11 (sentence -> if .)
    IF              reduce using rule 11 (sentence -> if .)
    WHILE           reduce using rule 11 (sentence -> if .)
    BAR             reduce using rule 11 (sentence -> if .)
    EMP             reduce using rule 11 (sentence -> if .)
    SET             reduce using rule 11 (sentence -> if .)
    CLR             reduce using rule 11 (sentence -> if .)
    PROC            reduce using rule 11 (sentence -> if .)
    STEP            reduce using rule 11 (sentence -> if .)
    BACK            reduce using rule 11 (sentence -> if .)
    RIGHT           reduce using rule 11 (sentence -> if .)
    LEFT            reduce using rule 11 (sentence -> if .)
    LOOK            reduce using rule 11 (sentence -> if .)


state 8

    (12) sentence -> while .

    $end            reduce using rule 12 (sentence -> while .)
    ELSE            reduce using rule 12 (sentence -> while .)
    CLBR            reduce using rule 12 (sentence -> while .)
    error           reduce using rule 12 (sentence -> while .)
    INT             reduce using rule 12 (sentence -> while .)
    CINT            reduce using rule 12 (sentence -> while .)
    BOOLEAN         reduce using rule 12 (sentence -> while .)
    CBOOLEAN        reduce using rule 12 (sentence -> while .)
    VARIABLE        reduce using rule 12 (sentence -> while .)
    MAP             reduce using rule 12 (sentence -> while .)
    IF              reduce using rule 12 (sentence -> while .)
    WHILE           reduce using rule 12 (sentence -> while .)
    BAR             reduce using rule 12 (sentence -> while .)
    EMP             reduce using rule 12 (sentence -> while .)
    SET             reduce using rule 12 (sentence -> while .)
    CLR             reduce using rule 12 (sentence -> while .)
    PROC            reduce using rule 12 (sentence -> while .)
    STEP            reduce using rule 12 (sentence -> while .)
    BACK            reduce using rule 12 (sentence -> while .)
    RIGHT           reduce using rule 12 (sentence -> while .)
    LEFT            reduce using rule 12 (sentence -> while .)
    LOOK            reduce using rule 12 (sentence -> while .)


state 9

    (13) sentence -> if_err .

    $end            reduce using rule 13 (sentence -> if_err .)
    ELSE            reduce using rule 13 (sentence -> if_err .)
    CLBR            reduce using rule 13 (sentence -> if_err .)
    error           reduce using rule 13 (sentence -> if_err .)
    INT             reduce using rule 13 (sentence -> if_err .)
    CINT            reduce using rule 13 (sentence -> if_err .)
    BOOLEAN         reduce using rule 13 (sentence -> if_err .)
    CBOOLEAN        reduce using rule 13 (sentence -> if_err .)
    VARIABLE        reduce using rule 13 (sentence -> if_err .)
    MAP             reduce using rule 13 (sentence -> if_err .)
    IF              reduce using rule 13 (sentence -> if_err .)
    WHILE           reduce using rule 13 (sentence -> if_err .)
    BAR             reduce using rule 13 (sentence -> if_err .)
    EMP             reduce using rule 13 (sentence -> if_err .)
    SET             reduce using rule 13 (sentence -> if_err .)
    CLR             reduce using rule 13 (sentence -> if_err .)
    PROC            reduce using rule 13 (sentence -> if_err .)
    STEP            reduce using rule 13 (sentence -> if_err .)
    BACK            reduce using rule 13 (sentence -> if_err .)
    RIGHT           reduce using rule 13 (sentence -> if_err .)
    LEFT            reduce using rule 13 (sentence -> if_err .)
    LOOK            reduce using rule 13 (sentence -> if_err .)


state 10

    (14) sentence -> while_err .

    $end            reduce using rule 14 (sentence -> while_err .)
    ELSE            reduce using rule 14 (sentence -> while_err .)
    CLBR            reduce using rule 14 (sentence -> while_err .)
    error           reduce using rule 14 (sentence -> while_err .)
    INT             reduce using rule 14 (sentence -> while_err .)
    CINT            reduce using rule 14 (sentence -> while_err .)
    BOOLEAN         reduce using rule 14 (sentence -> while_err .)
    CBOOLEAN        reduce using rule 14 (sentence -> while_err .)
    VARIABLE        reduce using rule 14 (sentence -> while_err .)
    MAP             reduce using rule 14 (sentence -> while_err .)
    IF              reduce using rule 14 (sentence -> while_err .)
    WHILE           reduce using rule 14 (sentence -> while_err .)
    BAR             reduce using rule 14 (sentence -> while_err .)
    EMP             reduce using rule 14 (sentence -> while_err .)
    SET             reduce using rule 14 (sentence -> while_err .)
    CLR             reduce using rule 14 (sentence -> while_err .)
    PROC            reduce using rule 14 (sentence -> while_err .)
    STEP            reduce using rule 14 (sentence -> while_err .)
    BACK            reduce using rule 14 (sentence -> while_err .)
    RIGHT           reduce using rule 14 (sentence -> while_err .)
    LEFT            reduce using rule 14 (sentence -> while_err .)
    LOOK            reduce using rule 14 (sentence -> while_err .)


state 11

    (15) sentence -> procedure .

    $end            reduce using rule 15 (sentence -> procedure .)
    ELSE            reduce using rule 15 (sentence -> procedure .)
    CLBR            reduce using rule 15 (sentence -> procedure .)
    error           reduce using rule 15 (sentence -> procedure .)
    INT             reduce using rule 15 (sentence -> procedure .)
    CINT            reduce using rule 15 (sentence -> procedure .)
    BOOLEAN         reduce using rule 15 (sentence -> procedure .)
    CBOOLEAN        reduce using rule 15 (sentence -> procedure .)
    VARIABLE        reduce using rule 15 (sentence -> procedure .)
    MAP             reduce using rule 15 (sentence -> procedure .)
    IF              reduce using rule 15 (sentence -> procedure .)
    WHILE           reduce using rule 15 (sentence -> procedure .)
    BAR             reduce using rule 15 (sentence -> procedure .)
    EMP             reduce using rule 15 (sentence -> procedure .)
    SET             reduce using rule 15 (sentence -> procedure .)
    CLR             reduce using rule 15 (sentence -> procedure .)
    PROC            reduce using rule 15 (sentence -> procedure .)
    STEP            reduce using rule 15 (sentence -> procedure .)
    BACK            reduce using rule 15 (sentence -> procedure .)
    RIGHT           reduce using rule 15 (sentence -> procedure .)
    LEFT            reduce using rule 15 (sentence -> procedure .)
    LOOK            reduce using rule 15 (sentence -> procedure .)


state 12

    (16) sentence -> call_procedure . EOS

    EOS             shift and go to state 42


state 13

    (17) sentence -> robot_command . EOS

    EOS             shift and go to state 43


state 14

    (18) sentence -> map_setting . EOS

    EOS             shift and go to state 44


state 15

    (19) sentence -> error .

    $end            reduce using rule 19 (sentence -> error .)
    ELSE            reduce using rule 19 (sentence -> error .)
    CLBR            reduce using rule 19 (sentence -> error .)
    error           reduce using rule 19 (sentence -> error .)
    INT             reduce using rule 19 (sentence -> error .)
    CINT            reduce using rule 19 (sentence -> error .)
    BOOLEAN         reduce using rule 19 (sentence -> error .)
    CBOOLEAN        reduce using rule 19 (sentence -> error .)
    VARIABLE        reduce using rule 19 (sentence -> error .)
    MAP             reduce using rule 19 (sentence -> error .)
    IF              reduce using rule 19 (sentence -> error .)
    WHILE           reduce using rule 19 (sentence -> error .)
    BAR             reduce using rule 19 (sentence -> error .)
    EMP             reduce using rule 19 (sentence -> error .)
    SET             reduce using rule 19 (sentence -> error .)
    CLR             reduce using rule 19 (sentence -> error .)
    PROC            reduce using rule 19 (sentence -> error .)
    STEP            reduce using rule 19 (sentence -> error .)
    BACK            reduce using rule 19 (sentence -> error .)
    RIGHT           reduce using rule 19 (sentence -> error .)
    LEFT            reduce using rule 19 (sentence -> error .)
    LOOK            reduce using rule 19 (sentence -> error .)


state 16

    (20) definition -> INT . VARIABLE EQUAL math_expr

    VARIABLE        shift and go to state 45


state 17

    (24) definition -> VARIABLE . ASSIGN math_expr
    (25) definition -> VARIABLE . ASSIGN logic_expr
    (50) call_procedure -> VARIABLE . OPSQBR varlist CLSQBR

    ASSIGN          shift and go to state 46
    OPSQBR          shift and go to state 47


state 18

    (21) definition -> CINT . VARIABLE EQUAL math_expr

    VARIABLE        shift and go to state 48


state 19

    (22) definition -> BOOLEAN . VARIABLE EQUAL logic_expr

    VARIABLE        shift and go to state 49


state 20

    (23) definition -> CBOOLEAN . VARIABLE EQUAL logic_expr

    VARIABLE        shift and go to state 50


state 21

    (26) definition -> MAP . VARIABLE

    VARIABLE        shift and go to state 51


state 22

    (58) if -> IF . logic_expr sentence_groups ELSE sentence_groups
    (59) if -> IF . logic_expr sentence_groups
    (53) if_err -> IF . error sentence_groups ELSE sentence_groups
    (54) if_err -> IF . error sentence_groups
    (39) logic_expr -> . NOT logic_expr
    (40) logic_expr -> . NOT call_procedure
    (41) logic_expr -> . OR or_elem or_elem
    (42) logic_expr -> . GT math_expr math_expr
    (43) logic_expr -> . LT math_expr math_expr
    (44) logic_expr -> . logic_cmd
    (45) logic_expr -> . bool
    (67) logic_cmd -> . STEP
    (33) bool -> . TRUE
    (34) bool -> . FALSE

    error           shift and go to state 53
    NOT             shift and go to state 54
    OR              shift and go to state 55
    GT              shift and go to state 56
    LT              shift and go to state 57
    STEP            shift and go to state 33
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    logic_expr                     shift and go to state 52
    logic_cmd                      shift and go to state 58
    bool                           shift and go to state 59

state 23

    (60) while -> WHILE . logic_expr DO sentence_groups
    (55) while_err -> WHILE . error DO sentence_groups
    (56) while_err -> WHILE . error
    (57) while_err -> WHILE . logic_expr error
    (39) logic_expr -> . NOT logic_expr
    (40) logic_expr -> . NOT call_procedure
    (41) logic_expr -> . OR or_elem or_elem
    (42) logic_expr -> . GT math_expr math_expr
    (43) logic_expr -> . LT math_expr math_expr
    (44) logic_expr -> . logic_cmd
    (45) logic_expr -> . bool
    (67) logic_cmd -> . STEP
    (33) bool -> . TRUE
    (34) bool -> . FALSE

    error           shift and go to state 63
    NOT             shift and go to state 54
    OR              shift and go to state 55
    GT              shift and go to state 56
    LT              shift and go to state 57
    STEP            shift and go to state 33
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    logic_expr                     shift and go to state 62
    logic_cmd                      shift and go to state 58
    bool                           shift and go to state 59

state 24

    (48) procedure -> proc_name . OPSQBR varlist CLSQBR sentence_groups

    OPSQBR          shift and go to state 64


state 25

    (61) robot_command -> logic_cmd .

    EOS             reduce using rule 61 (robot_command -> logic_cmd .)


state 26

    (62) robot_command -> rot_dir .

    EOS             reduce using rule 62 (robot_command -> rot_dir .)


state 27

    (63) robot_command -> math_cmd .

    EOS             reduce using rule 63 (robot_command -> math_cmd .)


state 28

    (69) map_setting -> BAR . OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR

    OPSQBR          shift and go to state 65


state 29

    (70) map_setting -> EMP . OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR

    OPSQBR          shift and go to state 66


state 30

    (71) map_setting -> SET . OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR

    OPSQBR          shift and go to state 67


state 31

    (72) map_setting -> CLR . OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR

    OPSQBR          shift and go to state 68


state 32

    (49) proc_name -> PROC . VARIABLE

    VARIABLE        shift and go to state 69


state 33

    (67) logic_cmd -> STEP .

    EOS             reduce using rule 67 (logic_cmd -> STEP .)
    OPBR            reduce using rule 67 (logic_cmd -> STEP .)
    error           reduce using rule 67 (logic_cmd -> STEP .)
    INT             reduce using rule 67 (logic_cmd -> STEP .)
    CINT            reduce using rule 67 (logic_cmd -> STEP .)
    BOOLEAN         reduce using rule 67 (logic_cmd -> STEP .)
    CBOOLEAN        reduce using rule 67 (logic_cmd -> STEP .)
    VARIABLE        reduce using rule 67 (logic_cmd -> STEP .)
    MAP             reduce using rule 67 (logic_cmd -> STEP .)
    IF              reduce using rule 67 (logic_cmd -> STEP .)
    WHILE           reduce using rule 67 (logic_cmd -> STEP .)
    BAR             reduce using rule 67 (logic_cmd -> STEP .)
    EMP             reduce using rule 67 (logic_cmd -> STEP .)
    SET             reduce using rule 67 (logic_cmd -> STEP .)
    CLR             reduce using rule 67 (logic_cmd -> STEP .)
    PROC            reduce using rule 67 (logic_cmd -> STEP .)
    STEP            reduce using rule 67 (logic_cmd -> STEP .)
    BACK            reduce using rule 67 (logic_cmd -> STEP .)
    RIGHT           reduce using rule 67 (logic_cmd -> STEP .)
    LEFT            reduce using rule 67 (logic_cmd -> STEP .)
    LOOK            reduce using rule 67 (logic_cmd -> STEP .)
    DO              reduce using rule 67 (logic_cmd -> STEP .)
    NOT             reduce using rule 67 (logic_cmd -> STEP .)
    OR              reduce using rule 67 (logic_cmd -> STEP .)
    GT              reduce using rule 67 (logic_cmd -> STEP .)
    LT              reduce using rule 67 (logic_cmd -> STEP .)
    TRUE            reduce using rule 67 (logic_cmd -> STEP .)
    FALSE           reduce using rule 67 (logic_cmd -> STEP .)
    INC             reduce using rule 67 (logic_cmd -> STEP .)
    DEC             reduce using rule 67 (logic_cmd -> STEP .)
    NUM             reduce using rule 67 (logic_cmd -> STEP .)
    CLSQBR          reduce using rule 67 (logic_cmd -> STEP .)


state 34

    (64) rot_dir -> BACK .

    EOS             reduce using rule 64 (rot_dir -> BACK .)


state 35

    (65) rot_dir -> RIGHT .

    EOS             reduce using rule 65 (rot_dir -> RIGHT .)


state 36

    (66) rot_dir -> LEFT .

    EOS             reduce using rule 66 (rot_dir -> LEFT .)


state 37

    (68) math_cmd -> LOOK .

    EOS             reduce using rule 68 (math_cmd -> LOOK .)
    INC             reduce using rule 68 (math_cmd -> LOOK .)
    DEC             reduce using rule 68 (math_cmd -> LOOK .)
    VARIABLE        reduce using rule 68 (math_cmd -> LOOK .)
    LOOK            reduce using rule 68 (math_cmd -> LOOK .)
    NUM             reduce using rule 68 (math_cmd -> LOOK .)
    NOT             reduce using rule 68 (math_cmd -> LOOK .)
    OR              reduce using rule 68 (math_cmd -> LOOK .)
    GT              reduce using rule 68 (math_cmd -> LOOK .)
    LT              reduce using rule 68 (math_cmd -> LOOK .)
    STEP            reduce using rule 68 (math_cmd -> LOOK .)
    TRUE            reduce using rule 68 (math_cmd -> LOOK .)
    FALSE           reduce using rule 68 (math_cmd -> LOOK .)
    OPBR            reduce using rule 68 (math_cmd -> LOOK .)
    error           reduce using rule 68 (math_cmd -> LOOK .)
    INT             reduce using rule 68 (math_cmd -> LOOK .)
    CINT            reduce using rule 68 (math_cmd -> LOOK .)
    BOOLEAN         reduce using rule 68 (math_cmd -> LOOK .)
    CBOOLEAN        reduce using rule 68 (math_cmd -> LOOK .)
    MAP             reduce using rule 68 (math_cmd -> LOOK .)
    IF              reduce using rule 68 (math_cmd -> LOOK .)
    WHILE           reduce using rule 68 (math_cmd -> LOOK .)
    BAR             reduce using rule 68 (math_cmd -> LOOK .)
    EMP             reduce using rule 68 (math_cmd -> LOOK .)
    SET             reduce using rule 68 (math_cmd -> LOOK .)
    CLR             reduce using rule 68 (math_cmd -> LOOK .)
    PROC            reduce using rule 68 (math_cmd -> LOOK .)
    BACK            reduce using rule 68 (math_cmd -> LOOK .)
    RIGHT           reduce using rule 68 (math_cmd -> LOOK .)
    LEFT            reduce using rule 68 (math_cmd -> LOOK .)
    DO              reduce using rule 68 (math_cmd -> LOOK .)
    CLSQBR          reduce using rule 68 (math_cmd -> LOOK .)


state 38

    (2) sentence_groups -> EOS OPBR . EOS sentence_group CLBR EOS
    (5) sentence_groups -> EOS OPBR . EOS sentence_group CLBR

    EOS             shift and go to state 70


state 39

    (6) sentence_groups -> EOS sentence .

    $end            reduce using rule 6 (sentence_groups -> EOS sentence .)
    ELSE            reduce using rule 6 (sentence_groups -> EOS sentence .)
    CLBR            reduce using rule 6 (sentence_groups -> EOS sentence .)
    error           reduce using rule 6 (sentence_groups -> EOS sentence .)
    INT             reduce using rule 6 (sentence_groups -> EOS sentence .)
    CINT            reduce using rule 6 (sentence_groups -> EOS sentence .)
    BOOLEAN         reduce using rule 6 (sentence_groups -> EOS sentence .)
    CBOOLEAN        reduce using rule 6 (sentence_groups -> EOS sentence .)
    VARIABLE        reduce using rule 6 (sentence_groups -> EOS sentence .)
    MAP             reduce using rule 6 (sentence_groups -> EOS sentence .)
    IF              reduce using rule 6 (sentence_groups -> EOS sentence .)
    WHILE           reduce using rule 6 (sentence_groups -> EOS sentence .)
    BAR             reduce using rule 6 (sentence_groups -> EOS sentence .)
    EMP             reduce using rule 6 (sentence_groups -> EOS sentence .)
    SET             reduce using rule 6 (sentence_groups -> EOS sentence .)
    CLR             reduce using rule 6 (sentence_groups -> EOS sentence .)
    PROC            reduce using rule 6 (sentence_groups -> EOS sentence .)
    STEP            reduce using rule 6 (sentence_groups -> EOS sentence .)
    BACK            reduce using rule 6 (sentence_groups -> EOS sentence .)
    RIGHT           reduce using rule 6 (sentence_groups -> EOS sentence .)
    LEFT            reduce using rule 6 (sentence_groups -> EOS sentence .)
    LOOK            reduce using rule 6 (sentence_groups -> EOS sentence .)


state 40

    (3) sentence_groups -> OPBR EOS . sentence_group CLBR EOS
    (4) sentence_groups -> OPBR EOS . sentence_group CLBR
    (8) sentence_group -> . sentence_group sentence
    (9) sentence_group -> . sentence
    (10) sentence -> . definition EOS
    (11) sentence -> . if
    (12) sentence -> . while
    (13) sentence -> . if_err
    (14) sentence -> . while_err
    (15) sentence -> . procedure
    (16) sentence -> . call_procedure EOS
    (17) sentence -> . robot_command EOS
    (18) sentence -> . map_setting EOS
    (19) sentence -> . error
    (20) definition -> . INT VARIABLE EQUAL math_expr
    (21) definition -> . CINT VARIABLE EQUAL math_expr
    (22) definition -> . BOOLEAN VARIABLE EQUAL logic_expr
    (23) definition -> . CBOOLEAN VARIABLE EQUAL logic_expr
    (24) definition -> . VARIABLE ASSIGN math_expr
    (25) definition -> . VARIABLE ASSIGN logic_expr
    (26) definition -> . MAP VARIABLE
    (58) if -> . IF logic_expr sentence_groups ELSE sentence_groups
    (59) if -> . IF logic_expr sentence_groups
    (60) while -> . WHILE logic_expr DO sentence_groups
    (53) if_err -> . IF error sentence_groups ELSE sentence_groups
    (54) if_err -> . IF error sentence_groups
    (55) while_err -> . WHILE error DO sentence_groups
    (56) while_err -> . WHILE error
    (57) while_err -> . WHILE logic_expr error
    (48) procedure -> . proc_name OPSQBR varlist CLSQBR sentence_groups
    (50) call_procedure -> . VARIABLE OPSQBR varlist CLSQBR
    (61) robot_command -> . logic_cmd
    (62) robot_command -> . rot_dir
    (63) robot_command -> . math_cmd
    (69) map_setting -> . BAR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (70) map_setting -> . EMP OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (71) map_setting -> . SET OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (72) map_setting -> . CLR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (49) proc_name -> . PROC VARIABLE
    (67) logic_cmd -> . STEP
    (64) rot_dir -> . BACK
    (65) rot_dir -> . RIGHT
    (66) rot_dir -> . LEFT
    (68) math_cmd -> . LOOK

    error           shift and go to state 15
    INT             shift and go to state 16
    CINT            shift and go to state 18
    BOOLEAN         shift and go to state 19
    CBOOLEAN        shift and go to state 20
    VARIABLE        shift and go to state 17
    MAP             shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    BAR             shift and go to state 28
    EMP             shift and go to state 29
    SET             shift and go to state 30
    CLR             shift and go to state 31
    PROC            shift and go to state 32
    STEP            shift and go to state 33
    BACK            shift and go to state 34
    RIGHT           shift and go to state 35
    LEFT            shift and go to state 36
    LOOK            shift and go to state 37

    sentence_group                 shift and go to state 71
    sentence                       shift and go to state 72
    definition                     shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    if_err                         shift and go to state 9
    while_err                      shift and go to state 10
    procedure                      shift and go to state 11
    call_procedure                 shift and go to state 12
    robot_command                  shift and go to state 13
    map_setting                    shift and go to state 14
    proc_name                      shift and go to state 24
    logic_cmd                      shift and go to state 25
    rot_dir                        shift and go to state 26
    math_cmd                       shift and go to state 27

state 41

    (10) sentence -> definition EOS .

    $end            reduce using rule 10 (sentence -> definition EOS .)
    ELSE            reduce using rule 10 (sentence -> definition EOS .)
    CLBR            reduce using rule 10 (sentence -> definition EOS .)
    error           reduce using rule 10 (sentence -> definition EOS .)
    INT             reduce using rule 10 (sentence -> definition EOS .)
    CINT            reduce using rule 10 (sentence -> definition EOS .)
    BOOLEAN         reduce using rule 10 (sentence -> definition EOS .)
    CBOOLEAN        reduce using rule 10 (sentence -> definition EOS .)
    VARIABLE        reduce using rule 10 (sentence -> definition EOS .)
    MAP             reduce using rule 10 (sentence -> definition EOS .)
    IF              reduce using rule 10 (sentence -> definition EOS .)
    WHILE           reduce using rule 10 (sentence -> definition EOS .)
    BAR             reduce using rule 10 (sentence -> definition EOS .)
    EMP             reduce using rule 10 (sentence -> definition EOS .)
    SET             reduce using rule 10 (sentence -> definition EOS .)
    CLR             reduce using rule 10 (sentence -> definition EOS .)
    PROC            reduce using rule 10 (sentence -> definition EOS .)
    STEP            reduce using rule 10 (sentence -> definition EOS .)
    BACK            reduce using rule 10 (sentence -> definition EOS .)
    RIGHT           reduce using rule 10 (sentence -> definition EOS .)
    LEFT            reduce using rule 10 (sentence -> definition EOS .)
    LOOK            reduce using rule 10 (sentence -> definition EOS .)


state 42

    (16) sentence -> call_procedure EOS .

    $end            reduce using rule 16 (sentence -> call_procedure EOS .)
    ELSE            reduce using rule 16 (sentence -> call_procedure EOS .)
    CLBR            reduce using rule 16 (sentence -> call_procedure EOS .)
    error           reduce using rule 16 (sentence -> call_procedure EOS .)
    INT             reduce using rule 16 (sentence -> call_procedure EOS .)
    CINT            reduce using rule 16 (sentence -> call_procedure EOS .)
    BOOLEAN         reduce using rule 16 (sentence -> call_procedure EOS .)
    CBOOLEAN        reduce using rule 16 (sentence -> call_procedure EOS .)
    VARIABLE        reduce using rule 16 (sentence -> call_procedure EOS .)
    MAP             reduce using rule 16 (sentence -> call_procedure EOS .)
    IF              reduce using rule 16 (sentence -> call_procedure EOS .)
    WHILE           reduce using rule 16 (sentence -> call_procedure EOS .)
    BAR             reduce using rule 16 (sentence -> call_procedure EOS .)
    EMP             reduce using rule 16 (sentence -> call_procedure EOS .)
    SET             reduce using rule 16 (sentence -> call_procedure EOS .)
    CLR             reduce using rule 16 (sentence -> call_procedure EOS .)
    PROC            reduce using rule 16 (sentence -> call_procedure EOS .)
    STEP            reduce using rule 16 (sentence -> call_procedure EOS .)
    BACK            reduce using rule 16 (sentence -> call_procedure EOS .)
    RIGHT           reduce using rule 16 (sentence -> call_procedure EOS .)
    LEFT            reduce using rule 16 (sentence -> call_procedure EOS .)
    LOOK            reduce using rule 16 (sentence -> call_procedure EOS .)


state 43

    (17) sentence -> robot_command EOS .

    $end            reduce using rule 17 (sentence -> robot_command EOS .)
    ELSE            reduce using rule 17 (sentence -> robot_command EOS .)
    CLBR            reduce using rule 17 (sentence -> robot_command EOS .)
    error           reduce using rule 17 (sentence -> robot_command EOS .)
    INT             reduce using rule 17 (sentence -> robot_command EOS .)
    CINT            reduce using rule 17 (sentence -> robot_command EOS .)
    BOOLEAN         reduce using rule 17 (sentence -> robot_command EOS .)
    CBOOLEAN        reduce using rule 17 (sentence -> robot_command EOS .)
    VARIABLE        reduce using rule 17 (sentence -> robot_command EOS .)
    MAP             reduce using rule 17 (sentence -> robot_command EOS .)
    IF              reduce using rule 17 (sentence -> robot_command EOS .)
    WHILE           reduce using rule 17 (sentence -> robot_command EOS .)
    BAR             reduce using rule 17 (sentence -> robot_command EOS .)
    EMP             reduce using rule 17 (sentence -> robot_command EOS .)
    SET             reduce using rule 17 (sentence -> robot_command EOS .)
    CLR             reduce using rule 17 (sentence -> robot_command EOS .)
    PROC            reduce using rule 17 (sentence -> robot_command EOS .)
    STEP            reduce using rule 17 (sentence -> robot_command EOS .)
    BACK            reduce using rule 17 (sentence -> robot_command EOS .)
    RIGHT           reduce using rule 17 (sentence -> robot_command EOS .)
    LEFT            reduce using rule 17 (sentence -> robot_command EOS .)
    LOOK            reduce using rule 17 (sentence -> robot_command EOS .)


state 44

    (18) sentence -> map_setting EOS .

    $end            reduce using rule 18 (sentence -> map_setting EOS .)
    ELSE            reduce using rule 18 (sentence -> map_setting EOS .)
    CLBR            reduce using rule 18 (sentence -> map_setting EOS .)
    error           reduce using rule 18 (sentence -> map_setting EOS .)
    INT             reduce using rule 18 (sentence -> map_setting EOS .)
    CINT            reduce using rule 18 (sentence -> map_setting EOS .)
    BOOLEAN         reduce using rule 18 (sentence -> map_setting EOS .)
    CBOOLEAN        reduce using rule 18 (sentence -> map_setting EOS .)
    VARIABLE        reduce using rule 18 (sentence -> map_setting EOS .)
    MAP             reduce using rule 18 (sentence -> map_setting EOS .)
    IF              reduce using rule 18 (sentence -> map_setting EOS .)
    WHILE           reduce using rule 18 (sentence -> map_setting EOS .)
    BAR             reduce using rule 18 (sentence -> map_setting EOS .)
    EMP             reduce using rule 18 (sentence -> map_setting EOS .)
    SET             reduce using rule 18 (sentence -> map_setting EOS .)
    CLR             reduce using rule 18 (sentence -> map_setting EOS .)
    PROC            reduce using rule 18 (sentence -> map_setting EOS .)
    STEP            reduce using rule 18 (sentence -> map_setting EOS .)
    BACK            reduce using rule 18 (sentence -> map_setting EOS .)
    RIGHT           reduce using rule 18 (sentence -> map_setting EOS .)
    LEFT            reduce using rule 18 (sentence -> map_setting EOS .)
    LOOK            reduce using rule 18 (sentence -> map_setting EOS .)


state 45

    (20) definition -> INT VARIABLE . EQUAL math_expr

    EQUAL           shift and go to state 73


state 46

    (24) definition -> VARIABLE ASSIGN . math_expr
    (25) definition -> VARIABLE ASSIGN . logic_expr
    (27) math_expr -> . INC math_first math_second
    (28) math_expr -> . DEC math_first math_second
    (29) math_expr -> . math_cmd empty
    (30) math_expr -> . VARIABLE
    (31) math_expr -> . number empty
    (39) logic_expr -> . NOT logic_expr
    (40) logic_expr -> . NOT call_procedure
    (41) logic_expr -> . OR or_elem or_elem
    (42) logic_expr -> . GT math_expr math_expr
    (43) logic_expr -> . LT math_expr math_expr
    (44) logic_expr -> . logic_cmd
    (45) logic_expr -> . bool
    (68) math_cmd -> . LOOK
    (32) number -> . NUM
    (67) logic_cmd -> . STEP
    (33) bool -> . TRUE
    (34) bool -> . FALSE

    INC             shift and go to state 77
    DEC             shift and go to state 78
    VARIABLE        shift and go to state 74
    NOT             shift and go to state 54
    OR              shift and go to state 55
    GT              shift and go to state 56
    LT              shift and go to state 57
    LOOK            shift and go to state 37
    NUM             shift and go to state 81
    STEP            shift and go to state 33
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    math_expr                      shift and go to state 75
    logic_expr                     shift and go to state 76
    math_cmd                       shift and go to state 79
    number                         shift and go to state 80
    logic_cmd                      shift and go to state 58
    bool                           shift and go to state 59

state 47

    (50) call_procedure -> VARIABLE OPSQBR . varlist CLSQBR
    (51) varlist -> . varlist VARIABLE
    (52) varlist -> . VARIABLE

    VARIABLE        shift and go to state 82

    varlist                        shift and go to state 83

state 48

    (21) definition -> CINT VARIABLE . EQUAL math_expr

    EQUAL           shift and go to state 84


state 49

    (22) definition -> BOOLEAN VARIABLE . EQUAL logic_expr

    EQUAL           shift and go to state 85


state 50

    (23) definition -> CBOOLEAN VARIABLE . EQUAL logic_expr

    EQUAL           shift and go to state 86


state 51

    (26) definition -> MAP VARIABLE .

    EOS             reduce using rule 26 (definition -> MAP VARIABLE .)


state 52

    (58) if -> IF logic_expr . sentence_groups ELSE sentence_groups
    (59) if -> IF logic_expr . sentence_groups
    (2) sentence_groups -> . EOS OPBR EOS sentence_group CLBR EOS
    (3) sentence_groups -> . OPBR EOS sentence_group CLBR EOS
    (4) sentence_groups -> . OPBR EOS sentence_group CLBR
    (5) sentence_groups -> . EOS OPBR EOS sentence_group CLBR
    (6) sentence_groups -> . EOS sentence
    (7) sentence_groups -> . sentence
    (10) sentence -> . definition EOS
    (11) sentence -> . if
    (12) sentence -> . while
    (13) sentence -> . if_err
    (14) sentence -> . while_err
    (15) sentence -> . procedure
    (16) sentence -> . call_procedure EOS
    (17) sentence -> . robot_command EOS
    (18) sentence -> . map_setting EOS
    (19) sentence -> . error
    (20) definition -> . INT VARIABLE EQUAL math_expr
    (21) definition -> . CINT VARIABLE EQUAL math_expr
    (22) definition -> . BOOLEAN VARIABLE EQUAL logic_expr
    (23) definition -> . CBOOLEAN VARIABLE EQUAL logic_expr
    (24) definition -> . VARIABLE ASSIGN math_expr
    (25) definition -> . VARIABLE ASSIGN logic_expr
    (26) definition -> . MAP VARIABLE
    (58) if -> . IF logic_expr sentence_groups ELSE sentence_groups
    (59) if -> . IF logic_expr sentence_groups
    (60) while -> . WHILE logic_expr DO sentence_groups
    (53) if_err -> . IF error sentence_groups ELSE sentence_groups
    (54) if_err -> . IF error sentence_groups
    (55) while_err -> . WHILE error DO sentence_groups
    (56) while_err -> . WHILE error
    (57) while_err -> . WHILE logic_expr error
    (48) procedure -> . proc_name OPSQBR varlist CLSQBR sentence_groups
    (50) call_procedure -> . VARIABLE OPSQBR varlist CLSQBR
    (61) robot_command -> . logic_cmd
    (62) robot_command -> . rot_dir
    (63) robot_command -> . math_cmd
    (69) map_setting -> . BAR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (70) map_setting -> . EMP OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (71) map_setting -> . SET OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (72) map_setting -> . CLR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (49) proc_name -> . PROC VARIABLE
    (67) logic_cmd -> . STEP
    (64) rot_dir -> . BACK
    (65) rot_dir -> . RIGHT
    (66) rot_dir -> . LEFT
    (68) math_cmd -> . LOOK

    EOS             shift and go to state 3
    OPBR            shift and go to state 4
    error           shift and go to state 15
    INT             shift and go to state 16
    CINT            shift and go to state 18
    BOOLEAN         shift and go to state 19
    CBOOLEAN        shift and go to state 20
    VARIABLE        shift and go to state 17
    MAP             shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    BAR             shift and go to state 28
    EMP             shift and go to state 29
    SET             shift and go to state 30
    CLR             shift and go to state 31
    PROC            shift and go to state 32
    STEP            shift and go to state 33
    BACK            shift and go to state 34
    RIGHT           shift and go to state 35
    LEFT            shift and go to state 36
    LOOK            shift and go to state 37

    sentence_groups                shift and go to state 87
    sentence                       shift and go to state 5
    definition                     shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    if_err                         shift and go to state 9
    while_err                      shift and go to state 10
    procedure                      shift and go to state 11
    call_procedure                 shift and go to state 12
    robot_command                  shift and go to state 13
    map_setting                    shift and go to state 14
    proc_name                      shift and go to state 24
    logic_cmd                      shift and go to state 25
    rot_dir                        shift and go to state 26
    math_cmd                       shift and go to state 27

state 53

    (53) if_err -> IF error . sentence_groups ELSE sentence_groups
    (54) if_err -> IF error . sentence_groups
    (2) sentence_groups -> . EOS OPBR EOS sentence_group CLBR EOS
    (3) sentence_groups -> . OPBR EOS sentence_group CLBR EOS
    (4) sentence_groups -> . OPBR EOS sentence_group CLBR
    (5) sentence_groups -> . EOS OPBR EOS sentence_group CLBR
    (6) sentence_groups -> . EOS sentence
    (7) sentence_groups -> . sentence
    (10) sentence -> . definition EOS
    (11) sentence -> . if
    (12) sentence -> . while
    (13) sentence -> . if_err
    (14) sentence -> . while_err
    (15) sentence -> . procedure
    (16) sentence -> . call_procedure EOS
    (17) sentence -> . robot_command EOS
    (18) sentence -> . map_setting EOS
    (19) sentence -> . error
    (20) definition -> . INT VARIABLE EQUAL math_expr
    (21) definition -> . CINT VARIABLE EQUAL math_expr
    (22) definition -> . BOOLEAN VARIABLE EQUAL logic_expr
    (23) definition -> . CBOOLEAN VARIABLE EQUAL logic_expr
    (24) definition -> . VARIABLE ASSIGN math_expr
    (25) definition -> . VARIABLE ASSIGN logic_expr
    (26) definition -> . MAP VARIABLE
    (58) if -> . IF logic_expr sentence_groups ELSE sentence_groups
    (59) if -> . IF logic_expr sentence_groups
    (60) while -> . WHILE logic_expr DO sentence_groups
    (53) if_err -> . IF error sentence_groups ELSE sentence_groups
    (54) if_err -> . IF error sentence_groups
    (55) while_err -> . WHILE error DO sentence_groups
    (56) while_err -> . WHILE error
    (57) while_err -> . WHILE logic_expr error
    (48) procedure -> . proc_name OPSQBR varlist CLSQBR sentence_groups
    (50) call_procedure -> . VARIABLE OPSQBR varlist CLSQBR
    (61) robot_command -> . logic_cmd
    (62) robot_command -> . rot_dir
    (63) robot_command -> . math_cmd
    (69) map_setting -> . BAR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (70) map_setting -> . EMP OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (71) map_setting -> . SET OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (72) map_setting -> . CLR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (49) proc_name -> . PROC VARIABLE
    (67) logic_cmd -> . STEP
    (64) rot_dir -> . BACK
    (65) rot_dir -> . RIGHT
    (66) rot_dir -> . LEFT
    (68) math_cmd -> . LOOK

    EOS             shift and go to state 3
    OPBR            shift and go to state 4
    error           shift and go to state 15
    INT             shift and go to state 16
    CINT            shift and go to state 18
    BOOLEAN         shift and go to state 19
    CBOOLEAN        shift and go to state 20
    VARIABLE        shift and go to state 17
    MAP             shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    BAR             shift and go to state 28
    EMP             shift and go to state 29
    SET             shift and go to state 30
    CLR             shift and go to state 31
    PROC            shift and go to state 32
    STEP            shift and go to state 33
    BACK            shift and go to state 34
    RIGHT           shift and go to state 35
    LEFT            shift and go to state 36
    LOOK            shift and go to state 37

    sentence_groups                shift and go to state 88
    sentence                       shift and go to state 5
    definition                     shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    if_err                         shift and go to state 9
    while_err                      shift and go to state 10
    procedure                      shift and go to state 11
    call_procedure                 shift and go to state 12
    robot_command                  shift and go to state 13
    map_setting                    shift and go to state 14
    proc_name                      shift and go to state 24
    logic_cmd                      shift and go to state 25
    rot_dir                        shift and go to state 26
    math_cmd                       shift and go to state 27

state 54

    (39) logic_expr -> NOT . logic_expr
    (40) logic_expr -> NOT . call_procedure
    (39) logic_expr -> . NOT logic_expr
    (40) logic_expr -> . NOT call_procedure
    (41) logic_expr -> . OR or_elem or_elem
    (42) logic_expr -> . GT math_expr math_expr
    (43) logic_expr -> . LT math_expr math_expr
    (44) logic_expr -> . logic_cmd
    (45) logic_expr -> . bool
    (50) call_procedure -> . VARIABLE OPSQBR varlist CLSQBR
    (67) logic_cmd -> . STEP
    (33) bool -> . TRUE
    (34) bool -> . FALSE

    NOT             shift and go to state 54
    OR              shift and go to state 55
    GT              shift and go to state 56
    LT              shift and go to state 57
    VARIABLE        shift and go to state 91
    STEP            shift and go to state 33
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    logic_expr                     shift and go to state 89
    call_procedure                 shift and go to state 90
    logic_cmd                      shift and go to state 58
    bool                           shift and go to state 59

state 55

    (41) logic_expr -> OR . or_elem or_elem
    (46) or_elem -> . logic_expr
    (47) or_elem -> . call_procedure
    (39) logic_expr -> . NOT logic_expr
    (40) logic_expr -> . NOT call_procedure
    (41) logic_expr -> . OR or_elem or_elem
    (42) logic_expr -> . GT math_expr math_expr
    (43) logic_expr -> . LT math_expr math_expr
    (44) logic_expr -> . logic_cmd
    (45) logic_expr -> . bool
    (50) call_procedure -> . VARIABLE OPSQBR varlist CLSQBR
    (67) logic_cmd -> . STEP
    (33) bool -> . TRUE
    (34) bool -> . FALSE

    NOT             shift and go to state 54
    OR              shift and go to state 55
    GT              shift and go to state 56
    LT              shift and go to state 57
    VARIABLE        shift and go to state 91
    STEP            shift and go to state 33
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    or_elem                        shift and go to state 92
    logic_expr                     shift and go to state 93
    call_procedure                 shift and go to state 94
    logic_cmd                      shift and go to state 58
    bool                           shift and go to state 59

state 56

    (42) logic_expr -> GT . math_expr math_expr
    (27) math_expr -> . INC math_first math_second
    (28) math_expr -> . DEC math_first math_second
    (29) math_expr -> . math_cmd empty
    (30) math_expr -> . VARIABLE
    (31) math_expr -> . number empty
    (68) math_cmd -> . LOOK
    (32) number -> . NUM

    INC             shift and go to state 77
    DEC             shift and go to state 78
    VARIABLE        shift and go to state 74
    LOOK            shift and go to state 37
    NUM             shift and go to state 81

    math_expr                      shift and go to state 95
    math_cmd                       shift and go to state 79
    number                         shift and go to state 80

state 57

    (43) logic_expr -> LT . math_expr math_expr
    (27) math_expr -> . INC math_first math_second
    (28) math_expr -> . DEC math_first math_second
    (29) math_expr -> . math_cmd empty
    (30) math_expr -> . VARIABLE
    (31) math_expr -> . number empty
    (68) math_cmd -> . LOOK
    (32) number -> . NUM

    INC             shift and go to state 77
    DEC             shift and go to state 78
    VARIABLE        shift and go to state 74
    LOOK            shift and go to state 37
    NUM             shift and go to state 81

    math_expr                      shift and go to state 96
    math_cmd                       shift and go to state 79
    number                         shift and go to state 80

state 58

    (44) logic_expr -> logic_cmd .

    EOS             reduce using rule 44 (logic_expr -> logic_cmd .)
    OPBR            reduce using rule 44 (logic_expr -> logic_cmd .)
    error           reduce using rule 44 (logic_expr -> logic_cmd .)
    INT             reduce using rule 44 (logic_expr -> logic_cmd .)
    CINT            reduce using rule 44 (logic_expr -> logic_cmd .)
    BOOLEAN         reduce using rule 44 (logic_expr -> logic_cmd .)
    CBOOLEAN        reduce using rule 44 (logic_expr -> logic_cmd .)
    VARIABLE        reduce using rule 44 (logic_expr -> logic_cmd .)
    MAP             reduce using rule 44 (logic_expr -> logic_cmd .)
    IF              reduce using rule 44 (logic_expr -> logic_cmd .)
    WHILE           reduce using rule 44 (logic_expr -> logic_cmd .)
    BAR             reduce using rule 44 (logic_expr -> logic_cmd .)
    EMP             reduce using rule 44 (logic_expr -> logic_cmd .)
    SET             reduce using rule 44 (logic_expr -> logic_cmd .)
    CLR             reduce using rule 44 (logic_expr -> logic_cmd .)
    PROC            reduce using rule 44 (logic_expr -> logic_cmd .)
    STEP            reduce using rule 44 (logic_expr -> logic_cmd .)
    BACK            reduce using rule 44 (logic_expr -> logic_cmd .)
    RIGHT           reduce using rule 44 (logic_expr -> logic_cmd .)
    LEFT            reduce using rule 44 (logic_expr -> logic_cmd .)
    LOOK            reduce using rule 44 (logic_expr -> logic_cmd .)
    DO              reduce using rule 44 (logic_expr -> logic_cmd .)
    NOT             reduce using rule 44 (logic_expr -> logic_cmd .)
    OR              reduce using rule 44 (logic_expr -> logic_cmd .)
    GT              reduce using rule 44 (logic_expr -> logic_cmd .)
    LT              reduce using rule 44 (logic_expr -> logic_cmd .)
    TRUE            reduce using rule 44 (logic_expr -> logic_cmd .)
    FALSE           reduce using rule 44 (logic_expr -> logic_cmd .)
    INC             reduce using rule 44 (logic_expr -> logic_cmd .)
    DEC             reduce using rule 44 (logic_expr -> logic_cmd .)
    NUM             reduce using rule 44 (logic_expr -> logic_cmd .)
    CLSQBR          reduce using rule 44 (logic_expr -> logic_cmd .)


state 59

    (45) logic_expr -> bool .

    EOS             reduce using rule 45 (logic_expr -> bool .)
    OPBR            reduce using rule 45 (logic_expr -> bool .)
    error           reduce using rule 45 (logic_expr -> bool .)
    INT             reduce using rule 45 (logic_expr -> bool .)
    CINT            reduce using rule 45 (logic_expr -> bool .)
    BOOLEAN         reduce using rule 45 (logic_expr -> bool .)
    CBOOLEAN        reduce using rule 45 (logic_expr -> bool .)
    VARIABLE        reduce using rule 45 (logic_expr -> bool .)
    MAP             reduce using rule 45 (logic_expr -> bool .)
    IF              reduce using rule 45 (logic_expr -> bool .)
    WHILE           reduce using rule 45 (logic_expr -> bool .)
    BAR             reduce using rule 45 (logic_expr -> bool .)
    EMP             reduce using rule 45 (logic_expr -> bool .)
    SET             reduce using rule 45 (logic_expr -> bool .)
    CLR             reduce using rule 45 (logic_expr -> bool .)
    PROC            reduce using rule 45 (logic_expr -> bool .)
    STEP            reduce using rule 45 (logic_expr -> bool .)
    BACK            reduce using rule 45 (logic_expr -> bool .)
    RIGHT           reduce using rule 45 (logic_expr -> bool .)
    LEFT            reduce using rule 45 (logic_expr -> bool .)
    LOOK            reduce using rule 45 (logic_expr -> bool .)
    DO              reduce using rule 45 (logic_expr -> bool .)
    NOT             reduce using rule 45 (logic_expr -> bool .)
    OR              reduce using rule 45 (logic_expr -> bool .)
    GT              reduce using rule 45 (logic_expr -> bool .)
    LT              reduce using rule 45 (logic_expr -> bool .)
    TRUE            reduce using rule 45 (logic_expr -> bool .)
    FALSE           reduce using rule 45 (logic_expr -> bool .)
    INC             reduce using rule 45 (logic_expr -> bool .)
    DEC             reduce using rule 45 (logic_expr -> bool .)
    NUM             reduce using rule 45 (logic_expr -> bool .)
    CLSQBR          reduce using rule 45 (logic_expr -> bool .)


state 60

    (33) bool -> TRUE .

    EOS             reduce using rule 33 (bool -> TRUE .)
    OPBR            reduce using rule 33 (bool -> TRUE .)
    error           reduce using rule 33 (bool -> TRUE .)
    INT             reduce using rule 33 (bool -> TRUE .)
    CINT            reduce using rule 33 (bool -> TRUE .)
    BOOLEAN         reduce using rule 33 (bool -> TRUE .)
    CBOOLEAN        reduce using rule 33 (bool -> TRUE .)
    VARIABLE        reduce using rule 33 (bool -> TRUE .)
    MAP             reduce using rule 33 (bool -> TRUE .)
    IF              reduce using rule 33 (bool -> TRUE .)
    WHILE           reduce using rule 33 (bool -> TRUE .)
    BAR             reduce using rule 33 (bool -> TRUE .)
    EMP             reduce using rule 33 (bool -> TRUE .)
    SET             reduce using rule 33 (bool -> TRUE .)
    CLR             reduce using rule 33 (bool -> TRUE .)
    PROC            reduce using rule 33 (bool -> TRUE .)
    STEP            reduce using rule 33 (bool -> TRUE .)
    BACK            reduce using rule 33 (bool -> TRUE .)
    RIGHT           reduce using rule 33 (bool -> TRUE .)
    LEFT            reduce using rule 33 (bool -> TRUE .)
    LOOK            reduce using rule 33 (bool -> TRUE .)
    DO              reduce using rule 33 (bool -> TRUE .)
    NOT             reduce using rule 33 (bool -> TRUE .)
    OR              reduce using rule 33 (bool -> TRUE .)
    GT              reduce using rule 33 (bool -> TRUE .)
    LT              reduce using rule 33 (bool -> TRUE .)
    TRUE            reduce using rule 33 (bool -> TRUE .)
    FALSE           reduce using rule 33 (bool -> TRUE .)
    INC             reduce using rule 33 (bool -> TRUE .)
    DEC             reduce using rule 33 (bool -> TRUE .)
    NUM             reduce using rule 33 (bool -> TRUE .)
    CLSQBR          reduce using rule 33 (bool -> TRUE .)


state 61

    (34) bool -> FALSE .

    EOS             reduce using rule 34 (bool -> FALSE .)
    OPBR            reduce using rule 34 (bool -> FALSE .)
    error           reduce using rule 34 (bool -> FALSE .)
    INT             reduce using rule 34 (bool -> FALSE .)
    CINT            reduce using rule 34 (bool -> FALSE .)
    BOOLEAN         reduce using rule 34 (bool -> FALSE .)
    CBOOLEAN        reduce using rule 34 (bool -> FALSE .)
    VARIABLE        reduce using rule 34 (bool -> FALSE .)
    MAP             reduce using rule 34 (bool -> FALSE .)
    IF              reduce using rule 34 (bool -> FALSE .)
    WHILE           reduce using rule 34 (bool -> FALSE .)
    BAR             reduce using rule 34 (bool -> FALSE .)
    EMP             reduce using rule 34 (bool -> FALSE .)
    SET             reduce using rule 34 (bool -> FALSE .)
    CLR             reduce using rule 34 (bool -> FALSE .)
    PROC            reduce using rule 34 (bool -> FALSE .)
    STEP            reduce using rule 34 (bool -> FALSE .)
    BACK            reduce using rule 34 (bool -> FALSE .)
    RIGHT           reduce using rule 34 (bool -> FALSE .)
    LEFT            reduce using rule 34 (bool -> FALSE .)
    LOOK            reduce using rule 34 (bool -> FALSE .)
    DO              reduce using rule 34 (bool -> FALSE .)
    NOT             reduce using rule 34 (bool -> FALSE .)
    OR              reduce using rule 34 (bool -> FALSE .)
    GT              reduce using rule 34 (bool -> FALSE .)
    LT              reduce using rule 34 (bool -> FALSE .)
    TRUE            reduce using rule 34 (bool -> FALSE .)
    FALSE           reduce using rule 34 (bool -> FALSE .)
    INC             reduce using rule 34 (bool -> FALSE .)
    DEC             reduce using rule 34 (bool -> FALSE .)
    NUM             reduce using rule 34 (bool -> FALSE .)
    CLSQBR          reduce using rule 34 (bool -> FALSE .)


state 62

    (60) while -> WHILE logic_expr . DO sentence_groups
    (57) while_err -> WHILE logic_expr . error

    DO              shift and go to state 97
    error           shift and go to state 98


state 63

    (55) while_err -> WHILE error . DO sentence_groups
    (56) while_err -> WHILE error .

    DO              shift and go to state 99
    $end            reduce using rule 56 (while_err -> WHILE error .)
    ELSE            reduce using rule 56 (while_err -> WHILE error .)
    CLBR            reduce using rule 56 (while_err -> WHILE error .)
    error           reduce using rule 56 (while_err -> WHILE error .)
    INT             reduce using rule 56 (while_err -> WHILE error .)
    CINT            reduce using rule 56 (while_err -> WHILE error .)
    BOOLEAN         reduce using rule 56 (while_err -> WHILE error .)
    CBOOLEAN        reduce using rule 56 (while_err -> WHILE error .)
    VARIABLE        reduce using rule 56 (while_err -> WHILE error .)
    MAP             reduce using rule 56 (while_err -> WHILE error .)
    IF              reduce using rule 56 (while_err -> WHILE error .)
    WHILE           reduce using rule 56 (while_err -> WHILE error .)
    BAR             reduce using rule 56 (while_err -> WHILE error .)
    EMP             reduce using rule 56 (while_err -> WHILE error .)
    SET             reduce using rule 56 (while_err -> WHILE error .)
    CLR             reduce using rule 56 (while_err -> WHILE error .)
    PROC            reduce using rule 56 (while_err -> WHILE error .)
    STEP            reduce using rule 56 (while_err -> WHILE error .)
    BACK            reduce using rule 56 (while_err -> WHILE error .)
    RIGHT           reduce using rule 56 (while_err -> WHILE error .)
    LEFT            reduce using rule 56 (while_err -> WHILE error .)
    LOOK            reduce using rule 56 (while_err -> WHILE error .)


state 64

    (48) procedure -> proc_name OPSQBR . varlist CLSQBR sentence_groups
    (51) varlist -> . varlist VARIABLE
    (52) varlist -> . VARIABLE

    VARIABLE        shift and go to state 82

    varlist                        shift and go to state 100

state 65

    (69) map_setting -> BAR OPSQBR . VARIABLE VARIABLE math_expr math_expr CLSQBR

    VARIABLE        shift and go to state 101


state 66

    (70) map_setting -> EMP OPSQBR . VARIABLE VARIABLE math_expr math_expr CLSQBR

    VARIABLE        shift and go to state 102


state 67

    (71) map_setting -> SET OPSQBR . VARIABLE VARIABLE math_expr math_expr CLSQBR

    VARIABLE        shift and go to state 103


state 68

    (72) map_setting -> CLR OPSQBR . VARIABLE VARIABLE math_expr math_expr CLSQBR

    VARIABLE        shift and go to state 104


state 69

    (49) proc_name -> PROC VARIABLE .

    OPSQBR          reduce using rule 49 (proc_name -> PROC VARIABLE .)


state 70

    (2) sentence_groups -> EOS OPBR EOS . sentence_group CLBR EOS
    (5) sentence_groups -> EOS OPBR EOS . sentence_group CLBR
    (8) sentence_group -> . sentence_group sentence
    (9) sentence_group -> . sentence
    (10) sentence -> . definition EOS
    (11) sentence -> . if
    (12) sentence -> . while
    (13) sentence -> . if_err
    (14) sentence -> . while_err
    (15) sentence -> . procedure
    (16) sentence -> . call_procedure EOS
    (17) sentence -> . robot_command EOS
    (18) sentence -> . map_setting EOS
    (19) sentence -> . error
    (20) definition -> . INT VARIABLE EQUAL math_expr
    (21) definition -> . CINT VARIABLE EQUAL math_expr
    (22) definition -> . BOOLEAN VARIABLE EQUAL logic_expr
    (23) definition -> . CBOOLEAN VARIABLE EQUAL logic_expr
    (24) definition -> . VARIABLE ASSIGN math_expr
    (25) definition -> . VARIABLE ASSIGN logic_expr
    (26) definition -> . MAP VARIABLE
    (58) if -> . IF logic_expr sentence_groups ELSE sentence_groups
    (59) if -> . IF logic_expr sentence_groups
    (60) while -> . WHILE logic_expr DO sentence_groups
    (53) if_err -> . IF error sentence_groups ELSE sentence_groups
    (54) if_err -> . IF error sentence_groups
    (55) while_err -> . WHILE error DO sentence_groups
    (56) while_err -> . WHILE error
    (57) while_err -> . WHILE logic_expr error
    (48) procedure -> . proc_name OPSQBR varlist CLSQBR sentence_groups
    (50) call_procedure -> . VARIABLE OPSQBR varlist CLSQBR
    (61) robot_command -> . logic_cmd
    (62) robot_command -> . rot_dir
    (63) robot_command -> . math_cmd
    (69) map_setting -> . BAR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (70) map_setting -> . EMP OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (71) map_setting -> . SET OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (72) map_setting -> . CLR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (49) proc_name -> . PROC VARIABLE
    (67) logic_cmd -> . STEP
    (64) rot_dir -> . BACK
    (65) rot_dir -> . RIGHT
    (66) rot_dir -> . LEFT
    (68) math_cmd -> . LOOK

    error           shift and go to state 15
    INT             shift and go to state 16
    CINT            shift and go to state 18
    BOOLEAN         shift and go to state 19
    CBOOLEAN        shift and go to state 20
    VARIABLE        shift and go to state 17
    MAP             shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    BAR             shift and go to state 28
    EMP             shift and go to state 29
    SET             shift and go to state 30
    CLR             shift and go to state 31
    PROC            shift and go to state 32
    STEP            shift and go to state 33
    BACK            shift and go to state 34
    RIGHT           shift and go to state 35
    LEFT            shift and go to state 36
    LOOK            shift and go to state 37

    sentence_group                 shift and go to state 105
    sentence                       shift and go to state 72
    definition                     shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    if_err                         shift and go to state 9
    while_err                      shift and go to state 10
    procedure                      shift and go to state 11
    call_procedure                 shift and go to state 12
    robot_command                  shift and go to state 13
    map_setting                    shift and go to state 14
    proc_name                      shift and go to state 24
    logic_cmd                      shift and go to state 25
    rot_dir                        shift and go to state 26
    math_cmd                       shift and go to state 27

state 71

    (3) sentence_groups -> OPBR EOS sentence_group . CLBR EOS
    (4) sentence_groups -> OPBR EOS sentence_group . CLBR
    (8) sentence_group -> sentence_group . sentence
    (10) sentence -> . definition EOS
    (11) sentence -> . if
    (12) sentence -> . while
    (13) sentence -> . if_err
    (14) sentence -> . while_err
    (15) sentence -> . procedure
    (16) sentence -> . call_procedure EOS
    (17) sentence -> . robot_command EOS
    (18) sentence -> . map_setting EOS
    (19) sentence -> . error
    (20) definition -> . INT VARIABLE EQUAL math_expr
    (21) definition -> . CINT VARIABLE EQUAL math_expr
    (22) definition -> . BOOLEAN VARIABLE EQUAL logic_expr
    (23) definition -> . CBOOLEAN VARIABLE EQUAL logic_expr
    (24) definition -> . VARIABLE ASSIGN math_expr
    (25) definition -> . VARIABLE ASSIGN logic_expr
    (26) definition -> . MAP VARIABLE
    (58) if -> . IF logic_expr sentence_groups ELSE sentence_groups
    (59) if -> . IF logic_expr sentence_groups
    (60) while -> . WHILE logic_expr DO sentence_groups
    (53) if_err -> . IF error sentence_groups ELSE sentence_groups
    (54) if_err -> . IF error sentence_groups
    (55) while_err -> . WHILE error DO sentence_groups
    (56) while_err -> . WHILE error
    (57) while_err -> . WHILE logic_expr error
    (48) procedure -> . proc_name OPSQBR varlist CLSQBR sentence_groups
    (50) call_procedure -> . VARIABLE OPSQBR varlist CLSQBR
    (61) robot_command -> . logic_cmd
    (62) robot_command -> . rot_dir
    (63) robot_command -> . math_cmd
    (69) map_setting -> . BAR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (70) map_setting -> . EMP OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (71) map_setting -> . SET OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (72) map_setting -> . CLR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (49) proc_name -> . PROC VARIABLE
    (67) logic_cmd -> . STEP
    (64) rot_dir -> . BACK
    (65) rot_dir -> . RIGHT
    (66) rot_dir -> . LEFT
    (68) math_cmd -> . LOOK

    CLBR            shift and go to state 106
    error           shift and go to state 15
    INT             shift and go to state 16
    CINT            shift and go to state 18
    BOOLEAN         shift and go to state 19
    CBOOLEAN        shift and go to state 20
    VARIABLE        shift and go to state 17
    MAP             shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    BAR             shift and go to state 28
    EMP             shift and go to state 29
    SET             shift and go to state 30
    CLR             shift and go to state 31
    PROC            shift and go to state 32
    STEP            shift and go to state 33
    BACK            shift and go to state 34
    RIGHT           shift and go to state 35
    LEFT            shift and go to state 36
    LOOK            shift and go to state 37

    sentence                       shift and go to state 107
    definition                     shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    if_err                         shift and go to state 9
    while_err                      shift and go to state 10
    procedure                      shift and go to state 11
    call_procedure                 shift and go to state 12
    robot_command                  shift and go to state 13
    map_setting                    shift and go to state 14
    proc_name                      shift and go to state 24
    logic_cmd                      shift and go to state 25
    rot_dir                        shift and go to state 26
    math_cmd                       shift and go to state 27

state 72

    (9) sentence_group -> sentence .

    CLBR            reduce using rule 9 (sentence_group -> sentence .)
    error           reduce using rule 9 (sentence_group -> sentence .)
    INT             reduce using rule 9 (sentence_group -> sentence .)
    CINT            reduce using rule 9 (sentence_group -> sentence .)
    BOOLEAN         reduce using rule 9 (sentence_group -> sentence .)
    CBOOLEAN        reduce using rule 9 (sentence_group -> sentence .)
    VARIABLE        reduce using rule 9 (sentence_group -> sentence .)
    MAP             reduce using rule 9 (sentence_group -> sentence .)
    IF              reduce using rule 9 (sentence_group -> sentence .)
    WHILE           reduce using rule 9 (sentence_group -> sentence .)
    BAR             reduce using rule 9 (sentence_group -> sentence .)
    EMP             reduce using rule 9 (sentence_group -> sentence .)
    SET             reduce using rule 9 (sentence_group -> sentence .)
    CLR             reduce using rule 9 (sentence_group -> sentence .)
    PROC            reduce using rule 9 (sentence_group -> sentence .)
    STEP            reduce using rule 9 (sentence_group -> sentence .)
    BACK            reduce using rule 9 (sentence_group -> sentence .)
    RIGHT           reduce using rule 9 (sentence_group -> sentence .)
    LEFT            reduce using rule 9 (sentence_group -> sentence .)
    LOOK            reduce using rule 9 (sentence_group -> sentence .)


state 73

    (20) definition -> INT VARIABLE EQUAL . math_expr
    (27) math_expr -> . INC math_first math_second
    (28) math_expr -> . DEC math_first math_second
    (29) math_expr -> . math_cmd empty
    (30) math_expr -> . VARIABLE
    (31) math_expr -> . number empty
    (68) math_cmd -> . LOOK
    (32) number -> . NUM

    INC             shift and go to state 77
    DEC             shift and go to state 78
    VARIABLE        shift and go to state 74
    LOOK            shift and go to state 37
    NUM             shift and go to state 81

    math_expr                      shift and go to state 108
    math_cmd                       shift and go to state 79
    number                         shift and go to state 80

state 74

    (30) math_expr -> VARIABLE .

    EOS             reduce using rule 30 (math_expr -> VARIABLE .)
    INC             reduce using rule 30 (math_expr -> VARIABLE .)
    DEC             reduce using rule 30 (math_expr -> VARIABLE .)
    VARIABLE        reduce using rule 30 (math_expr -> VARIABLE .)
    LOOK            reduce using rule 30 (math_expr -> VARIABLE .)
    NUM             reduce using rule 30 (math_expr -> VARIABLE .)
    OPBR            reduce using rule 30 (math_expr -> VARIABLE .)
    error           reduce using rule 30 (math_expr -> VARIABLE .)
    INT             reduce using rule 30 (math_expr -> VARIABLE .)
    CINT            reduce using rule 30 (math_expr -> VARIABLE .)
    BOOLEAN         reduce using rule 30 (math_expr -> VARIABLE .)
    CBOOLEAN        reduce using rule 30 (math_expr -> VARIABLE .)
    MAP             reduce using rule 30 (math_expr -> VARIABLE .)
    IF              reduce using rule 30 (math_expr -> VARIABLE .)
    WHILE           reduce using rule 30 (math_expr -> VARIABLE .)
    BAR             reduce using rule 30 (math_expr -> VARIABLE .)
    EMP             reduce using rule 30 (math_expr -> VARIABLE .)
    SET             reduce using rule 30 (math_expr -> VARIABLE .)
    CLR             reduce using rule 30 (math_expr -> VARIABLE .)
    PROC            reduce using rule 30 (math_expr -> VARIABLE .)
    STEP            reduce using rule 30 (math_expr -> VARIABLE .)
    BACK            reduce using rule 30 (math_expr -> VARIABLE .)
    RIGHT           reduce using rule 30 (math_expr -> VARIABLE .)
    LEFT            reduce using rule 30 (math_expr -> VARIABLE .)
    DO              reduce using rule 30 (math_expr -> VARIABLE .)
    NOT             reduce using rule 30 (math_expr -> VARIABLE .)
    OR              reduce using rule 30 (math_expr -> VARIABLE .)
    GT              reduce using rule 30 (math_expr -> VARIABLE .)
    LT              reduce using rule 30 (math_expr -> VARIABLE .)
    TRUE            reduce using rule 30 (math_expr -> VARIABLE .)
    FALSE           reduce using rule 30 (math_expr -> VARIABLE .)
    CLSQBR          reduce using rule 30 (math_expr -> VARIABLE .)


state 75

    (24) definition -> VARIABLE ASSIGN math_expr .

    EOS             reduce using rule 24 (definition -> VARIABLE ASSIGN math_expr .)


state 76

    (25) definition -> VARIABLE ASSIGN logic_expr .

    EOS             reduce using rule 25 (definition -> VARIABLE ASSIGN logic_expr .)


state 77

    (27) math_expr -> INC . math_first math_second
    (35) math_first -> . math_expr
    (36) math_first -> . call_procedure
    (27) math_expr -> . INC math_first math_second
    (28) math_expr -> . DEC math_first math_second
    (29) math_expr -> . math_cmd empty
    (30) math_expr -> . VARIABLE
    (31) math_expr -> . number empty
    (50) call_procedure -> . VARIABLE OPSQBR varlist CLSQBR
    (68) math_cmd -> . LOOK
    (32) number -> . NUM

    INC             shift and go to state 77
    DEC             shift and go to state 78
    VARIABLE        shift and go to state 112
    LOOK            shift and go to state 37
    NUM             shift and go to state 81

    math_first                     shift and go to state 109
    math_expr                      shift and go to state 110
    call_procedure                 shift and go to state 111
    math_cmd                       shift and go to state 79
    number                         shift and go to state 80

state 78

    (28) math_expr -> DEC . math_first math_second
    (35) math_first -> . math_expr
    (36) math_first -> . call_procedure
    (27) math_expr -> . INC math_first math_second
    (28) math_expr -> . DEC math_first math_second
    (29) math_expr -> . math_cmd empty
    (30) math_expr -> . VARIABLE
    (31) math_expr -> . number empty
    (50) call_procedure -> . VARIABLE OPSQBR varlist CLSQBR
    (68) math_cmd -> . LOOK
    (32) number -> . NUM

    INC             shift and go to state 77
    DEC             shift and go to state 78
    VARIABLE        shift and go to state 112
    LOOK            shift and go to state 37
    NUM             shift and go to state 81

    math_first                     shift and go to state 113
    math_expr                      shift and go to state 110
    call_procedure                 shift and go to state 111
    math_cmd                       shift and go to state 79
    number                         shift and go to state 80

state 79

    (29) math_expr -> math_cmd . empty
    (73) empty -> .

    EOS             reduce using rule 73 (empty -> .)
    INC             reduce using rule 73 (empty -> .)
    DEC             reduce using rule 73 (empty -> .)
    VARIABLE        reduce using rule 73 (empty -> .)
    LOOK            reduce using rule 73 (empty -> .)
    NUM             reduce using rule 73 (empty -> .)
    NOT             reduce using rule 73 (empty -> .)
    OR              reduce using rule 73 (empty -> .)
    GT              reduce using rule 73 (empty -> .)
    LT              reduce using rule 73 (empty -> .)
    STEP            reduce using rule 73 (empty -> .)
    TRUE            reduce using rule 73 (empty -> .)
    FALSE           reduce using rule 73 (empty -> .)
    OPBR            reduce using rule 73 (empty -> .)
    error           reduce using rule 73 (empty -> .)
    INT             reduce using rule 73 (empty -> .)
    CINT            reduce using rule 73 (empty -> .)
    BOOLEAN         reduce using rule 73 (empty -> .)
    CBOOLEAN        reduce using rule 73 (empty -> .)
    MAP             reduce using rule 73 (empty -> .)
    IF              reduce using rule 73 (empty -> .)
    WHILE           reduce using rule 73 (empty -> .)
    BAR             reduce using rule 73 (empty -> .)
    EMP             reduce using rule 73 (empty -> .)
    SET             reduce using rule 73 (empty -> .)
    CLR             reduce using rule 73 (empty -> .)
    PROC            reduce using rule 73 (empty -> .)
    BACK            reduce using rule 73 (empty -> .)
    RIGHT           reduce using rule 73 (empty -> .)
    LEFT            reduce using rule 73 (empty -> .)
    DO              reduce using rule 73 (empty -> .)
    CLSQBR          reduce using rule 73 (empty -> .)

    empty                          shift and go to state 114

state 80

    (31) math_expr -> number . empty
    (73) empty -> .

    EOS             reduce using rule 73 (empty -> .)
    INC             reduce using rule 73 (empty -> .)
    DEC             reduce using rule 73 (empty -> .)
    VARIABLE        reduce using rule 73 (empty -> .)
    LOOK            reduce using rule 73 (empty -> .)
    NUM             reduce using rule 73 (empty -> .)
    NOT             reduce using rule 73 (empty -> .)
    OR              reduce using rule 73 (empty -> .)
    GT              reduce using rule 73 (empty -> .)
    LT              reduce using rule 73 (empty -> .)
    STEP            reduce using rule 73 (empty -> .)
    TRUE            reduce using rule 73 (empty -> .)
    FALSE           reduce using rule 73 (empty -> .)
    OPBR            reduce using rule 73 (empty -> .)
    error           reduce using rule 73 (empty -> .)
    INT             reduce using rule 73 (empty -> .)
    CINT            reduce using rule 73 (empty -> .)
    BOOLEAN         reduce using rule 73 (empty -> .)
    CBOOLEAN        reduce using rule 73 (empty -> .)
    MAP             reduce using rule 73 (empty -> .)
    IF              reduce using rule 73 (empty -> .)
    WHILE           reduce using rule 73 (empty -> .)
    BAR             reduce using rule 73 (empty -> .)
    EMP             reduce using rule 73 (empty -> .)
    SET             reduce using rule 73 (empty -> .)
    CLR             reduce using rule 73 (empty -> .)
    PROC            reduce using rule 73 (empty -> .)
    BACK            reduce using rule 73 (empty -> .)
    RIGHT           reduce using rule 73 (empty -> .)
    LEFT            reduce using rule 73 (empty -> .)
    DO              reduce using rule 73 (empty -> .)
    CLSQBR          reduce using rule 73 (empty -> .)

    empty                          shift and go to state 115

state 81

    (32) number -> NUM .

    EOS             reduce using rule 32 (number -> NUM .)
    INC             reduce using rule 32 (number -> NUM .)
    DEC             reduce using rule 32 (number -> NUM .)
    VARIABLE        reduce using rule 32 (number -> NUM .)
    LOOK            reduce using rule 32 (number -> NUM .)
    NUM             reduce using rule 32 (number -> NUM .)
    NOT             reduce using rule 32 (number -> NUM .)
    OR              reduce using rule 32 (number -> NUM .)
    GT              reduce using rule 32 (number -> NUM .)
    LT              reduce using rule 32 (number -> NUM .)
    STEP            reduce using rule 32 (number -> NUM .)
    TRUE            reduce using rule 32 (number -> NUM .)
    FALSE           reduce using rule 32 (number -> NUM .)
    OPBR            reduce using rule 32 (number -> NUM .)
    error           reduce using rule 32 (number -> NUM .)
    INT             reduce using rule 32 (number -> NUM .)
    CINT            reduce using rule 32 (number -> NUM .)
    BOOLEAN         reduce using rule 32 (number -> NUM .)
    CBOOLEAN        reduce using rule 32 (number -> NUM .)
    MAP             reduce using rule 32 (number -> NUM .)
    IF              reduce using rule 32 (number -> NUM .)
    WHILE           reduce using rule 32 (number -> NUM .)
    BAR             reduce using rule 32 (number -> NUM .)
    EMP             reduce using rule 32 (number -> NUM .)
    SET             reduce using rule 32 (number -> NUM .)
    CLR             reduce using rule 32 (number -> NUM .)
    PROC            reduce using rule 32 (number -> NUM .)
    BACK            reduce using rule 32 (number -> NUM .)
    RIGHT           reduce using rule 32 (number -> NUM .)
    LEFT            reduce using rule 32 (number -> NUM .)
    DO              reduce using rule 32 (number -> NUM .)
    CLSQBR          reduce using rule 32 (number -> NUM .)


state 82

    (52) varlist -> VARIABLE .

    CLSQBR          reduce using rule 52 (varlist -> VARIABLE .)
    VARIABLE        reduce using rule 52 (varlist -> VARIABLE .)


state 83

    (50) call_procedure -> VARIABLE OPSQBR varlist . CLSQBR
    (51) varlist -> varlist . VARIABLE

    CLSQBR          shift and go to state 117
    VARIABLE        shift and go to state 116


state 84

    (21) definition -> CINT VARIABLE EQUAL . math_expr
    (27) math_expr -> . INC math_first math_second
    (28) math_expr -> . DEC math_first math_second
    (29) math_expr -> . math_cmd empty
    (30) math_expr -> . VARIABLE
    (31) math_expr -> . number empty
    (68) math_cmd -> . LOOK
    (32) number -> . NUM

    INC             shift and go to state 77
    DEC             shift and go to state 78
    VARIABLE        shift and go to state 74
    LOOK            shift and go to state 37
    NUM             shift and go to state 81

    math_expr                      shift and go to state 118
    math_cmd                       shift and go to state 79
    number                         shift and go to state 80

state 85

    (22) definition -> BOOLEAN VARIABLE EQUAL . logic_expr
    (39) logic_expr -> . NOT logic_expr
    (40) logic_expr -> . NOT call_procedure
    (41) logic_expr -> . OR or_elem or_elem
    (42) logic_expr -> . GT math_expr math_expr
    (43) logic_expr -> . LT math_expr math_expr
    (44) logic_expr -> . logic_cmd
    (45) logic_expr -> . bool
    (67) logic_cmd -> . STEP
    (33) bool -> . TRUE
    (34) bool -> . FALSE

    NOT             shift and go to state 54
    OR              shift and go to state 55
    GT              shift and go to state 56
    LT              shift and go to state 57
    STEP            shift and go to state 33
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    logic_expr                     shift and go to state 119
    logic_cmd                      shift and go to state 58
    bool                           shift and go to state 59

state 86

    (23) definition -> CBOOLEAN VARIABLE EQUAL . logic_expr
    (39) logic_expr -> . NOT logic_expr
    (40) logic_expr -> . NOT call_procedure
    (41) logic_expr -> . OR or_elem or_elem
    (42) logic_expr -> . GT math_expr math_expr
    (43) logic_expr -> . LT math_expr math_expr
    (44) logic_expr -> . logic_cmd
    (45) logic_expr -> . bool
    (67) logic_cmd -> . STEP
    (33) bool -> . TRUE
    (34) bool -> . FALSE

    NOT             shift and go to state 54
    OR              shift and go to state 55
    GT              shift and go to state 56
    LT              shift and go to state 57
    STEP            shift and go to state 33
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    logic_expr                     shift and go to state 120
    logic_cmd                      shift and go to state 58
    bool                           shift and go to state 59

state 87

    (58) if -> IF logic_expr sentence_groups . ELSE sentence_groups
    (59) if -> IF logic_expr sentence_groups .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 121
    $end            reduce using rule 59 (if -> IF logic_expr sentence_groups .)
    CLBR            reduce using rule 59 (if -> IF logic_expr sentence_groups .)
    error           reduce using rule 59 (if -> IF logic_expr sentence_groups .)
    INT             reduce using rule 59 (if -> IF logic_expr sentence_groups .)
    CINT            reduce using rule 59 (if -> IF logic_expr sentence_groups .)
    BOOLEAN         reduce using rule 59 (if -> IF logic_expr sentence_groups .)
    CBOOLEAN        reduce using rule 59 (if -> IF logic_expr sentence_groups .)
    VARIABLE        reduce using rule 59 (if -> IF logic_expr sentence_groups .)
    MAP             reduce using rule 59 (if -> IF logic_expr sentence_groups .)
    IF              reduce using rule 59 (if -> IF logic_expr sentence_groups .)
    WHILE           reduce using rule 59 (if -> IF logic_expr sentence_groups .)
    BAR             reduce using rule 59 (if -> IF logic_expr sentence_groups .)
    EMP             reduce using rule 59 (if -> IF logic_expr sentence_groups .)
    SET             reduce using rule 59 (if -> IF logic_expr sentence_groups .)
    CLR             reduce using rule 59 (if -> IF logic_expr sentence_groups .)
    PROC            reduce using rule 59 (if -> IF logic_expr sentence_groups .)
    STEP            reduce using rule 59 (if -> IF logic_expr sentence_groups .)
    BACK            reduce using rule 59 (if -> IF logic_expr sentence_groups .)
    RIGHT           reduce using rule 59 (if -> IF logic_expr sentence_groups .)
    LEFT            reduce using rule 59 (if -> IF logic_expr sentence_groups .)
    LOOK            reduce using rule 59 (if -> IF logic_expr sentence_groups .)

  ! ELSE            [ reduce using rule 59 (if -> IF logic_expr sentence_groups .) ]


state 88

    (53) if_err -> IF error sentence_groups . ELSE sentence_groups
    (54) if_err -> IF error sentence_groups .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 122
    $end            reduce using rule 54 (if_err -> IF error sentence_groups .)
    CLBR            reduce using rule 54 (if_err -> IF error sentence_groups .)
    error           reduce using rule 54 (if_err -> IF error sentence_groups .)
    INT             reduce using rule 54 (if_err -> IF error sentence_groups .)
    CINT            reduce using rule 54 (if_err -> IF error sentence_groups .)
    BOOLEAN         reduce using rule 54 (if_err -> IF error sentence_groups .)
    CBOOLEAN        reduce using rule 54 (if_err -> IF error sentence_groups .)
    VARIABLE        reduce using rule 54 (if_err -> IF error sentence_groups .)
    MAP             reduce using rule 54 (if_err -> IF error sentence_groups .)
    IF              reduce using rule 54 (if_err -> IF error sentence_groups .)
    WHILE           reduce using rule 54 (if_err -> IF error sentence_groups .)
    BAR             reduce using rule 54 (if_err -> IF error sentence_groups .)
    EMP             reduce using rule 54 (if_err -> IF error sentence_groups .)
    SET             reduce using rule 54 (if_err -> IF error sentence_groups .)
    CLR             reduce using rule 54 (if_err -> IF error sentence_groups .)
    PROC            reduce using rule 54 (if_err -> IF error sentence_groups .)
    STEP            reduce using rule 54 (if_err -> IF error sentence_groups .)
    BACK            reduce using rule 54 (if_err -> IF error sentence_groups .)
    RIGHT           reduce using rule 54 (if_err -> IF error sentence_groups .)
    LEFT            reduce using rule 54 (if_err -> IF error sentence_groups .)
    LOOK            reduce using rule 54 (if_err -> IF error sentence_groups .)

  ! ELSE            [ reduce using rule 54 (if_err -> IF error sentence_groups .) ]


state 89

    (39) logic_expr -> NOT logic_expr .

    EOS             reduce using rule 39 (logic_expr -> NOT logic_expr .)
    OPBR            reduce using rule 39 (logic_expr -> NOT logic_expr .)
    error           reduce using rule 39 (logic_expr -> NOT logic_expr .)
    INT             reduce using rule 39 (logic_expr -> NOT logic_expr .)
    CINT            reduce using rule 39 (logic_expr -> NOT logic_expr .)
    BOOLEAN         reduce using rule 39 (logic_expr -> NOT logic_expr .)
    CBOOLEAN        reduce using rule 39 (logic_expr -> NOT logic_expr .)
    VARIABLE        reduce using rule 39 (logic_expr -> NOT logic_expr .)
    MAP             reduce using rule 39 (logic_expr -> NOT logic_expr .)
    IF              reduce using rule 39 (logic_expr -> NOT logic_expr .)
    WHILE           reduce using rule 39 (logic_expr -> NOT logic_expr .)
    BAR             reduce using rule 39 (logic_expr -> NOT logic_expr .)
    EMP             reduce using rule 39 (logic_expr -> NOT logic_expr .)
    SET             reduce using rule 39 (logic_expr -> NOT logic_expr .)
    CLR             reduce using rule 39 (logic_expr -> NOT logic_expr .)
    PROC            reduce using rule 39 (logic_expr -> NOT logic_expr .)
    STEP            reduce using rule 39 (logic_expr -> NOT logic_expr .)
    BACK            reduce using rule 39 (logic_expr -> NOT logic_expr .)
    RIGHT           reduce using rule 39 (logic_expr -> NOT logic_expr .)
    LEFT            reduce using rule 39 (logic_expr -> NOT logic_expr .)
    LOOK            reduce using rule 39 (logic_expr -> NOT logic_expr .)
    DO              reduce using rule 39 (logic_expr -> NOT logic_expr .)
    NOT             reduce using rule 39 (logic_expr -> NOT logic_expr .)
    OR              reduce using rule 39 (logic_expr -> NOT logic_expr .)
    GT              reduce using rule 39 (logic_expr -> NOT logic_expr .)
    LT              reduce using rule 39 (logic_expr -> NOT logic_expr .)
    TRUE            reduce using rule 39 (logic_expr -> NOT logic_expr .)
    FALSE           reduce using rule 39 (logic_expr -> NOT logic_expr .)
    INC             reduce using rule 39 (logic_expr -> NOT logic_expr .)
    DEC             reduce using rule 39 (logic_expr -> NOT logic_expr .)
    NUM             reduce using rule 39 (logic_expr -> NOT logic_expr .)
    CLSQBR          reduce using rule 39 (logic_expr -> NOT logic_expr .)


state 90

    (40) logic_expr -> NOT call_procedure .

    EOS             reduce using rule 40 (logic_expr -> NOT call_procedure .)
    OPBR            reduce using rule 40 (logic_expr -> NOT call_procedure .)
    error           reduce using rule 40 (logic_expr -> NOT call_procedure .)
    INT             reduce using rule 40 (logic_expr -> NOT call_procedure .)
    CINT            reduce using rule 40 (logic_expr -> NOT call_procedure .)
    BOOLEAN         reduce using rule 40 (logic_expr -> NOT call_procedure .)
    CBOOLEAN        reduce using rule 40 (logic_expr -> NOT call_procedure .)
    VARIABLE        reduce using rule 40 (logic_expr -> NOT call_procedure .)
    MAP             reduce using rule 40 (logic_expr -> NOT call_procedure .)
    IF              reduce using rule 40 (logic_expr -> NOT call_procedure .)
    WHILE           reduce using rule 40 (logic_expr -> NOT call_procedure .)
    BAR             reduce using rule 40 (logic_expr -> NOT call_procedure .)
    EMP             reduce using rule 40 (logic_expr -> NOT call_procedure .)
    SET             reduce using rule 40 (logic_expr -> NOT call_procedure .)
    CLR             reduce using rule 40 (logic_expr -> NOT call_procedure .)
    PROC            reduce using rule 40 (logic_expr -> NOT call_procedure .)
    STEP            reduce using rule 40 (logic_expr -> NOT call_procedure .)
    BACK            reduce using rule 40 (logic_expr -> NOT call_procedure .)
    RIGHT           reduce using rule 40 (logic_expr -> NOT call_procedure .)
    LEFT            reduce using rule 40 (logic_expr -> NOT call_procedure .)
    LOOK            reduce using rule 40 (logic_expr -> NOT call_procedure .)
    DO              reduce using rule 40 (logic_expr -> NOT call_procedure .)
    NOT             reduce using rule 40 (logic_expr -> NOT call_procedure .)
    OR              reduce using rule 40 (logic_expr -> NOT call_procedure .)
    GT              reduce using rule 40 (logic_expr -> NOT call_procedure .)
    LT              reduce using rule 40 (logic_expr -> NOT call_procedure .)
    TRUE            reduce using rule 40 (logic_expr -> NOT call_procedure .)
    FALSE           reduce using rule 40 (logic_expr -> NOT call_procedure .)
    INC             reduce using rule 40 (logic_expr -> NOT call_procedure .)
    DEC             reduce using rule 40 (logic_expr -> NOT call_procedure .)
    NUM             reduce using rule 40 (logic_expr -> NOT call_procedure .)
    CLSQBR          reduce using rule 40 (logic_expr -> NOT call_procedure .)


state 91

    (50) call_procedure -> VARIABLE . OPSQBR varlist CLSQBR

    OPSQBR          shift and go to state 47


state 92

    (41) logic_expr -> OR or_elem . or_elem
    (46) or_elem -> . logic_expr
    (47) or_elem -> . call_procedure
    (39) logic_expr -> . NOT logic_expr
    (40) logic_expr -> . NOT call_procedure
    (41) logic_expr -> . OR or_elem or_elem
    (42) logic_expr -> . GT math_expr math_expr
    (43) logic_expr -> . LT math_expr math_expr
    (44) logic_expr -> . logic_cmd
    (45) logic_expr -> . bool
    (50) call_procedure -> . VARIABLE OPSQBR varlist CLSQBR
    (67) logic_cmd -> . STEP
    (33) bool -> . TRUE
    (34) bool -> . FALSE

    NOT             shift and go to state 54
    OR              shift and go to state 55
    GT              shift and go to state 56
    LT              shift and go to state 57
    VARIABLE        shift and go to state 91
    STEP            shift and go to state 33
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    or_elem                        shift and go to state 123
    logic_expr                     shift and go to state 93
    call_procedure                 shift and go to state 94
    logic_cmd                      shift and go to state 58
    bool                           shift and go to state 59

state 93

    (46) or_elem -> logic_expr .

    NOT             reduce using rule 46 (or_elem -> logic_expr .)
    OR              reduce using rule 46 (or_elem -> logic_expr .)
    GT              reduce using rule 46 (or_elem -> logic_expr .)
    LT              reduce using rule 46 (or_elem -> logic_expr .)
    VARIABLE        reduce using rule 46 (or_elem -> logic_expr .)
    STEP            reduce using rule 46 (or_elem -> logic_expr .)
    TRUE            reduce using rule 46 (or_elem -> logic_expr .)
    FALSE           reduce using rule 46 (or_elem -> logic_expr .)
    EOS             reduce using rule 46 (or_elem -> logic_expr .)
    OPBR            reduce using rule 46 (or_elem -> logic_expr .)
    error           reduce using rule 46 (or_elem -> logic_expr .)
    INT             reduce using rule 46 (or_elem -> logic_expr .)
    CINT            reduce using rule 46 (or_elem -> logic_expr .)
    BOOLEAN         reduce using rule 46 (or_elem -> logic_expr .)
    CBOOLEAN        reduce using rule 46 (or_elem -> logic_expr .)
    MAP             reduce using rule 46 (or_elem -> logic_expr .)
    IF              reduce using rule 46 (or_elem -> logic_expr .)
    WHILE           reduce using rule 46 (or_elem -> logic_expr .)
    BAR             reduce using rule 46 (or_elem -> logic_expr .)
    EMP             reduce using rule 46 (or_elem -> logic_expr .)
    SET             reduce using rule 46 (or_elem -> logic_expr .)
    CLR             reduce using rule 46 (or_elem -> logic_expr .)
    PROC            reduce using rule 46 (or_elem -> logic_expr .)
    BACK            reduce using rule 46 (or_elem -> logic_expr .)
    RIGHT           reduce using rule 46 (or_elem -> logic_expr .)
    LEFT            reduce using rule 46 (or_elem -> logic_expr .)
    LOOK            reduce using rule 46 (or_elem -> logic_expr .)
    DO              reduce using rule 46 (or_elem -> logic_expr .)
    INC             reduce using rule 46 (or_elem -> logic_expr .)
    DEC             reduce using rule 46 (or_elem -> logic_expr .)
    NUM             reduce using rule 46 (or_elem -> logic_expr .)
    CLSQBR          reduce using rule 46 (or_elem -> logic_expr .)


state 94

    (47) or_elem -> call_procedure .

    NOT             reduce using rule 47 (or_elem -> call_procedure .)
    OR              reduce using rule 47 (or_elem -> call_procedure .)
    GT              reduce using rule 47 (or_elem -> call_procedure .)
    LT              reduce using rule 47 (or_elem -> call_procedure .)
    VARIABLE        reduce using rule 47 (or_elem -> call_procedure .)
    STEP            reduce using rule 47 (or_elem -> call_procedure .)
    TRUE            reduce using rule 47 (or_elem -> call_procedure .)
    FALSE           reduce using rule 47 (or_elem -> call_procedure .)
    EOS             reduce using rule 47 (or_elem -> call_procedure .)
    OPBR            reduce using rule 47 (or_elem -> call_procedure .)
    error           reduce using rule 47 (or_elem -> call_procedure .)
    INT             reduce using rule 47 (or_elem -> call_procedure .)
    CINT            reduce using rule 47 (or_elem -> call_procedure .)
    BOOLEAN         reduce using rule 47 (or_elem -> call_procedure .)
    CBOOLEAN        reduce using rule 47 (or_elem -> call_procedure .)
    MAP             reduce using rule 47 (or_elem -> call_procedure .)
    IF              reduce using rule 47 (or_elem -> call_procedure .)
    WHILE           reduce using rule 47 (or_elem -> call_procedure .)
    BAR             reduce using rule 47 (or_elem -> call_procedure .)
    EMP             reduce using rule 47 (or_elem -> call_procedure .)
    SET             reduce using rule 47 (or_elem -> call_procedure .)
    CLR             reduce using rule 47 (or_elem -> call_procedure .)
    PROC            reduce using rule 47 (or_elem -> call_procedure .)
    BACK            reduce using rule 47 (or_elem -> call_procedure .)
    RIGHT           reduce using rule 47 (or_elem -> call_procedure .)
    LEFT            reduce using rule 47 (or_elem -> call_procedure .)
    LOOK            reduce using rule 47 (or_elem -> call_procedure .)
    DO              reduce using rule 47 (or_elem -> call_procedure .)
    INC             reduce using rule 47 (or_elem -> call_procedure .)
    DEC             reduce using rule 47 (or_elem -> call_procedure .)
    NUM             reduce using rule 47 (or_elem -> call_procedure .)
    CLSQBR          reduce using rule 47 (or_elem -> call_procedure .)


state 95

    (42) logic_expr -> GT math_expr . math_expr
    (27) math_expr -> . INC math_first math_second
    (28) math_expr -> . DEC math_first math_second
    (29) math_expr -> . math_cmd empty
    (30) math_expr -> . VARIABLE
    (31) math_expr -> . number empty
    (68) math_cmd -> . LOOK
    (32) number -> . NUM

    INC             shift and go to state 77
    DEC             shift and go to state 78
    VARIABLE        shift and go to state 74
    LOOK            shift and go to state 37
    NUM             shift and go to state 81

    math_expr                      shift and go to state 124
    math_cmd                       shift and go to state 79
    number                         shift and go to state 80

state 96

    (43) logic_expr -> LT math_expr . math_expr
    (27) math_expr -> . INC math_first math_second
    (28) math_expr -> . DEC math_first math_second
    (29) math_expr -> . math_cmd empty
    (30) math_expr -> . VARIABLE
    (31) math_expr -> . number empty
    (68) math_cmd -> . LOOK
    (32) number -> . NUM

    INC             shift and go to state 77
    DEC             shift and go to state 78
    VARIABLE        shift and go to state 74
    LOOK            shift and go to state 37
    NUM             shift and go to state 81

    math_expr                      shift and go to state 125
    math_cmd                       shift and go to state 79
    number                         shift and go to state 80

state 97

    (60) while -> WHILE logic_expr DO . sentence_groups
    (2) sentence_groups -> . EOS OPBR EOS sentence_group CLBR EOS
    (3) sentence_groups -> . OPBR EOS sentence_group CLBR EOS
    (4) sentence_groups -> . OPBR EOS sentence_group CLBR
    (5) sentence_groups -> . EOS OPBR EOS sentence_group CLBR
    (6) sentence_groups -> . EOS sentence
    (7) sentence_groups -> . sentence
    (10) sentence -> . definition EOS
    (11) sentence -> . if
    (12) sentence -> . while
    (13) sentence -> . if_err
    (14) sentence -> . while_err
    (15) sentence -> . procedure
    (16) sentence -> . call_procedure EOS
    (17) sentence -> . robot_command EOS
    (18) sentence -> . map_setting EOS
    (19) sentence -> . error
    (20) definition -> . INT VARIABLE EQUAL math_expr
    (21) definition -> . CINT VARIABLE EQUAL math_expr
    (22) definition -> . BOOLEAN VARIABLE EQUAL logic_expr
    (23) definition -> . CBOOLEAN VARIABLE EQUAL logic_expr
    (24) definition -> . VARIABLE ASSIGN math_expr
    (25) definition -> . VARIABLE ASSIGN logic_expr
    (26) definition -> . MAP VARIABLE
    (58) if -> . IF logic_expr sentence_groups ELSE sentence_groups
    (59) if -> . IF logic_expr sentence_groups
    (60) while -> . WHILE logic_expr DO sentence_groups
    (53) if_err -> . IF error sentence_groups ELSE sentence_groups
    (54) if_err -> . IF error sentence_groups
    (55) while_err -> . WHILE error DO sentence_groups
    (56) while_err -> . WHILE error
    (57) while_err -> . WHILE logic_expr error
    (48) procedure -> . proc_name OPSQBR varlist CLSQBR sentence_groups
    (50) call_procedure -> . VARIABLE OPSQBR varlist CLSQBR
    (61) robot_command -> . logic_cmd
    (62) robot_command -> . rot_dir
    (63) robot_command -> . math_cmd
    (69) map_setting -> . BAR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (70) map_setting -> . EMP OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (71) map_setting -> . SET OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (72) map_setting -> . CLR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (49) proc_name -> . PROC VARIABLE
    (67) logic_cmd -> . STEP
    (64) rot_dir -> . BACK
    (65) rot_dir -> . RIGHT
    (66) rot_dir -> . LEFT
    (68) math_cmd -> . LOOK

    EOS             shift and go to state 3
    OPBR            shift and go to state 4
    error           shift and go to state 15
    INT             shift and go to state 16
    CINT            shift and go to state 18
    BOOLEAN         shift and go to state 19
    CBOOLEAN        shift and go to state 20
    VARIABLE        shift and go to state 17
    MAP             shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    BAR             shift and go to state 28
    EMP             shift and go to state 29
    SET             shift and go to state 30
    CLR             shift and go to state 31
    PROC            shift and go to state 32
    STEP            shift and go to state 33
    BACK            shift and go to state 34
    RIGHT           shift and go to state 35
    LEFT            shift and go to state 36
    LOOK            shift and go to state 37

    sentence_groups                shift and go to state 126
    sentence                       shift and go to state 5
    definition                     shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    if_err                         shift and go to state 9
    while_err                      shift and go to state 10
    procedure                      shift and go to state 11
    call_procedure                 shift and go to state 12
    robot_command                  shift and go to state 13
    map_setting                    shift and go to state 14
    proc_name                      shift and go to state 24
    logic_cmd                      shift and go to state 25
    rot_dir                        shift and go to state 26
    math_cmd                       shift and go to state 27

state 98

    (57) while_err -> WHILE logic_expr error .

    $end            reduce using rule 57 (while_err -> WHILE logic_expr error .)
    ELSE            reduce using rule 57 (while_err -> WHILE logic_expr error .)
    CLBR            reduce using rule 57 (while_err -> WHILE logic_expr error .)
    error           reduce using rule 57 (while_err -> WHILE logic_expr error .)
    INT             reduce using rule 57 (while_err -> WHILE logic_expr error .)
    CINT            reduce using rule 57 (while_err -> WHILE logic_expr error .)
    BOOLEAN         reduce using rule 57 (while_err -> WHILE logic_expr error .)
    CBOOLEAN        reduce using rule 57 (while_err -> WHILE logic_expr error .)
    VARIABLE        reduce using rule 57 (while_err -> WHILE logic_expr error .)
    MAP             reduce using rule 57 (while_err -> WHILE logic_expr error .)
    IF              reduce using rule 57 (while_err -> WHILE logic_expr error .)
    WHILE           reduce using rule 57 (while_err -> WHILE logic_expr error .)
    BAR             reduce using rule 57 (while_err -> WHILE logic_expr error .)
    EMP             reduce using rule 57 (while_err -> WHILE logic_expr error .)
    SET             reduce using rule 57 (while_err -> WHILE logic_expr error .)
    CLR             reduce using rule 57 (while_err -> WHILE logic_expr error .)
    PROC            reduce using rule 57 (while_err -> WHILE logic_expr error .)
    STEP            reduce using rule 57 (while_err -> WHILE logic_expr error .)
    BACK            reduce using rule 57 (while_err -> WHILE logic_expr error .)
    RIGHT           reduce using rule 57 (while_err -> WHILE logic_expr error .)
    LEFT            reduce using rule 57 (while_err -> WHILE logic_expr error .)
    LOOK            reduce using rule 57 (while_err -> WHILE logic_expr error .)


state 99

    (55) while_err -> WHILE error DO . sentence_groups
    (2) sentence_groups -> . EOS OPBR EOS sentence_group CLBR EOS
    (3) sentence_groups -> . OPBR EOS sentence_group CLBR EOS
    (4) sentence_groups -> . OPBR EOS sentence_group CLBR
    (5) sentence_groups -> . EOS OPBR EOS sentence_group CLBR
    (6) sentence_groups -> . EOS sentence
    (7) sentence_groups -> . sentence
    (10) sentence -> . definition EOS
    (11) sentence -> . if
    (12) sentence -> . while
    (13) sentence -> . if_err
    (14) sentence -> . while_err
    (15) sentence -> . procedure
    (16) sentence -> . call_procedure EOS
    (17) sentence -> . robot_command EOS
    (18) sentence -> . map_setting EOS
    (19) sentence -> . error
    (20) definition -> . INT VARIABLE EQUAL math_expr
    (21) definition -> . CINT VARIABLE EQUAL math_expr
    (22) definition -> . BOOLEAN VARIABLE EQUAL logic_expr
    (23) definition -> . CBOOLEAN VARIABLE EQUAL logic_expr
    (24) definition -> . VARIABLE ASSIGN math_expr
    (25) definition -> . VARIABLE ASSIGN logic_expr
    (26) definition -> . MAP VARIABLE
    (58) if -> . IF logic_expr sentence_groups ELSE sentence_groups
    (59) if -> . IF logic_expr sentence_groups
    (60) while -> . WHILE logic_expr DO sentence_groups
    (53) if_err -> . IF error sentence_groups ELSE sentence_groups
    (54) if_err -> . IF error sentence_groups
    (55) while_err -> . WHILE error DO sentence_groups
    (56) while_err -> . WHILE error
    (57) while_err -> . WHILE logic_expr error
    (48) procedure -> . proc_name OPSQBR varlist CLSQBR sentence_groups
    (50) call_procedure -> . VARIABLE OPSQBR varlist CLSQBR
    (61) robot_command -> . logic_cmd
    (62) robot_command -> . rot_dir
    (63) robot_command -> . math_cmd
    (69) map_setting -> . BAR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (70) map_setting -> . EMP OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (71) map_setting -> . SET OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (72) map_setting -> . CLR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (49) proc_name -> . PROC VARIABLE
    (67) logic_cmd -> . STEP
    (64) rot_dir -> . BACK
    (65) rot_dir -> . RIGHT
    (66) rot_dir -> . LEFT
    (68) math_cmd -> . LOOK

    EOS             shift and go to state 3
    OPBR            shift and go to state 4
    error           shift and go to state 15
    INT             shift and go to state 16
    CINT            shift and go to state 18
    BOOLEAN         shift and go to state 19
    CBOOLEAN        shift and go to state 20
    VARIABLE        shift and go to state 17
    MAP             shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    BAR             shift and go to state 28
    EMP             shift and go to state 29
    SET             shift and go to state 30
    CLR             shift and go to state 31
    PROC            shift and go to state 32
    STEP            shift and go to state 33
    BACK            shift and go to state 34
    RIGHT           shift and go to state 35
    LEFT            shift and go to state 36
    LOOK            shift and go to state 37

    sentence_groups                shift and go to state 127
    sentence                       shift and go to state 5
    definition                     shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    if_err                         shift and go to state 9
    while_err                      shift and go to state 10
    procedure                      shift and go to state 11
    call_procedure                 shift and go to state 12
    robot_command                  shift and go to state 13
    map_setting                    shift and go to state 14
    proc_name                      shift and go to state 24
    logic_cmd                      shift and go to state 25
    rot_dir                        shift and go to state 26
    math_cmd                       shift and go to state 27

state 100

    (48) procedure -> proc_name OPSQBR varlist . CLSQBR sentence_groups
    (51) varlist -> varlist . VARIABLE

    CLSQBR          shift and go to state 128
    VARIABLE        shift and go to state 116


state 101

    (69) map_setting -> BAR OPSQBR VARIABLE . VARIABLE math_expr math_expr CLSQBR

    VARIABLE        shift and go to state 129


state 102

    (70) map_setting -> EMP OPSQBR VARIABLE . VARIABLE math_expr math_expr CLSQBR

    VARIABLE        shift and go to state 130


state 103

    (71) map_setting -> SET OPSQBR VARIABLE . VARIABLE math_expr math_expr CLSQBR

    VARIABLE        shift and go to state 131


state 104

    (72) map_setting -> CLR OPSQBR VARIABLE . VARIABLE math_expr math_expr CLSQBR

    VARIABLE        shift and go to state 132


state 105

    (2) sentence_groups -> EOS OPBR EOS sentence_group . CLBR EOS
    (5) sentence_groups -> EOS OPBR EOS sentence_group . CLBR
    (8) sentence_group -> sentence_group . sentence
    (10) sentence -> . definition EOS
    (11) sentence -> . if
    (12) sentence -> . while
    (13) sentence -> . if_err
    (14) sentence -> . while_err
    (15) sentence -> . procedure
    (16) sentence -> . call_procedure EOS
    (17) sentence -> . robot_command EOS
    (18) sentence -> . map_setting EOS
    (19) sentence -> . error
    (20) definition -> . INT VARIABLE EQUAL math_expr
    (21) definition -> . CINT VARIABLE EQUAL math_expr
    (22) definition -> . BOOLEAN VARIABLE EQUAL logic_expr
    (23) definition -> . CBOOLEAN VARIABLE EQUAL logic_expr
    (24) definition -> . VARIABLE ASSIGN math_expr
    (25) definition -> . VARIABLE ASSIGN logic_expr
    (26) definition -> . MAP VARIABLE
    (58) if -> . IF logic_expr sentence_groups ELSE sentence_groups
    (59) if -> . IF logic_expr sentence_groups
    (60) while -> . WHILE logic_expr DO sentence_groups
    (53) if_err -> . IF error sentence_groups ELSE sentence_groups
    (54) if_err -> . IF error sentence_groups
    (55) while_err -> . WHILE error DO sentence_groups
    (56) while_err -> . WHILE error
    (57) while_err -> . WHILE logic_expr error
    (48) procedure -> . proc_name OPSQBR varlist CLSQBR sentence_groups
    (50) call_procedure -> . VARIABLE OPSQBR varlist CLSQBR
    (61) robot_command -> . logic_cmd
    (62) robot_command -> . rot_dir
    (63) robot_command -> . math_cmd
    (69) map_setting -> . BAR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (70) map_setting -> . EMP OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (71) map_setting -> . SET OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (72) map_setting -> . CLR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (49) proc_name -> . PROC VARIABLE
    (67) logic_cmd -> . STEP
    (64) rot_dir -> . BACK
    (65) rot_dir -> . RIGHT
    (66) rot_dir -> . LEFT
    (68) math_cmd -> . LOOK

    CLBR            shift and go to state 133
    error           shift and go to state 15
    INT             shift and go to state 16
    CINT            shift and go to state 18
    BOOLEAN         shift and go to state 19
    CBOOLEAN        shift and go to state 20
    VARIABLE        shift and go to state 17
    MAP             shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    BAR             shift and go to state 28
    EMP             shift and go to state 29
    SET             shift and go to state 30
    CLR             shift and go to state 31
    PROC            shift and go to state 32
    STEP            shift and go to state 33
    BACK            shift and go to state 34
    RIGHT           shift and go to state 35
    LEFT            shift and go to state 36
    LOOK            shift and go to state 37

    sentence                       shift and go to state 107
    definition                     shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    if_err                         shift and go to state 9
    while_err                      shift and go to state 10
    procedure                      shift and go to state 11
    call_procedure                 shift and go to state 12
    robot_command                  shift and go to state 13
    map_setting                    shift and go to state 14
    proc_name                      shift and go to state 24
    logic_cmd                      shift and go to state 25
    rot_dir                        shift and go to state 26
    math_cmd                       shift and go to state 27

state 106

    (3) sentence_groups -> OPBR EOS sentence_group CLBR . EOS
    (4) sentence_groups -> OPBR EOS sentence_group CLBR .

    EOS             shift and go to state 134
    $end            reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)
    ELSE            reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)
    CLBR            reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)
    error           reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)
    INT             reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)
    CINT            reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)
    BOOLEAN         reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)
    CBOOLEAN        reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)
    VARIABLE        reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)
    MAP             reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)
    IF              reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)
    WHILE           reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)
    BAR             reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)
    EMP             reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)
    SET             reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)
    CLR             reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)
    PROC            reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)
    STEP            reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)
    BACK            reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)
    RIGHT           reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)
    LEFT            reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)
    LOOK            reduce using rule 4 (sentence_groups -> OPBR EOS sentence_group CLBR .)


state 107

    (8) sentence_group -> sentence_group sentence .

    CLBR            reduce using rule 8 (sentence_group -> sentence_group sentence .)
    error           reduce using rule 8 (sentence_group -> sentence_group sentence .)
    INT             reduce using rule 8 (sentence_group -> sentence_group sentence .)
    CINT            reduce using rule 8 (sentence_group -> sentence_group sentence .)
    BOOLEAN         reduce using rule 8 (sentence_group -> sentence_group sentence .)
    CBOOLEAN        reduce using rule 8 (sentence_group -> sentence_group sentence .)
    VARIABLE        reduce using rule 8 (sentence_group -> sentence_group sentence .)
    MAP             reduce using rule 8 (sentence_group -> sentence_group sentence .)
    IF              reduce using rule 8 (sentence_group -> sentence_group sentence .)
    WHILE           reduce using rule 8 (sentence_group -> sentence_group sentence .)
    BAR             reduce using rule 8 (sentence_group -> sentence_group sentence .)
    EMP             reduce using rule 8 (sentence_group -> sentence_group sentence .)
    SET             reduce using rule 8 (sentence_group -> sentence_group sentence .)
    CLR             reduce using rule 8 (sentence_group -> sentence_group sentence .)
    PROC            reduce using rule 8 (sentence_group -> sentence_group sentence .)
    STEP            reduce using rule 8 (sentence_group -> sentence_group sentence .)
    BACK            reduce using rule 8 (sentence_group -> sentence_group sentence .)
    RIGHT           reduce using rule 8 (sentence_group -> sentence_group sentence .)
    LEFT            reduce using rule 8 (sentence_group -> sentence_group sentence .)
    LOOK            reduce using rule 8 (sentence_group -> sentence_group sentence .)


state 108

    (20) definition -> INT VARIABLE EQUAL math_expr .

    EOS             reduce using rule 20 (definition -> INT VARIABLE EQUAL math_expr .)


state 109

    (27) math_expr -> INC math_first . math_second
    (37) math_second -> . math_first
    (38) math_second -> . logic_expr
    (35) math_first -> . math_expr
    (36) math_first -> . call_procedure
    (39) logic_expr -> . NOT logic_expr
    (40) logic_expr -> . NOT call_procedure
    (41) logic_expr -> . OR or_elem or_elem
    (42) logic_expr -> . GT math_expr math_expr
    (43) logic_expr -> . LT math_expr math_expr
    (44) logic_expr -> . logic_cmd
    (45) logic_expr -> . bool
    (27) math_expr -> . INC math_first math_second
    (28) math_expr -> . DEC math_first math_second
    (29) math_expr -> . math_cmd empty
    (30) math_expr -> . VARIABLE
    (31) math_expr -> . number empty
    (50) call_procedure -> . VARIABLE OPSQBR varlist CLSQBR
    (67) logic_cmd -> . STEP
    (33) bool -> . TRUE
    (34) bool -> . FALSE
    (68) math_cmd -> . LOOK
    (32) number -> . NUM

    NOT             shift and go to state 54
    OR              shift and go to state 55
    GT              shift and go to state 56
    LT              shift and go to state 57
    INC             shift and go to state 77
    DEC             shift and go to state 78
    VARIABLE        shift and go to state 112
    STEP            shift and go to state 33
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    LOOK            shift and go to state 37
    NUM             shift and go to state 81

    math_first                     shift and go to state 135
    math_second                    shift and go to state 136
    logic_expr                     shift and go to state 137
    math_expr                      shift and go to state 110
    call_procedure                 shift and go to state 111
    logic_cmd                      shift and go to state 58
    bool                           shift and go to state 59
    math_cmd                       shift and go to state 79
    number                         shift and go to state 80

state 110

    (35) math_first -> math_expr .

    NOT             reduce using rule 35 (math_first -> math_expr .)
    OR              reduce using rule 35 (math_first -> math_expr .)
    GT              reduce using rule 35 (math_first -> math_expr .)
    LT              reduce using rule 35 (math_first -> math_expr .)
    INC             reduce using rule 35 (math_first -> math_expr .)
    DEC             reduce using rule 35 (math_first -> math_expr .)
    VARIABLE        reduce using rule 35 (math_first -> math_expr .)
    STEP            reduce using rule 35 (math_first -> math_expr .)
    TRUE            reduce using rule 35 (math_first -> math_expr .)
    FALSE           reduce using rule 35 (math_first -> math_expr .)
    LOOK            reduce using rule 35 (math_first -> math_expr .)
    NUM             reduce using rule 35 (math_first -> math_expr .)
    EOS             reduce using rule 35 (math_first -> math_expr .)
    OPBR            reduce using rule 35 (math_first -> math_expr .)
    error           reduce using rule 35 (math_first -> math_expr .)
    INT             reduce using rule 35 (math_first -> math_expr .)
    CINT            reduce using rule 35 (math_first -> math_expr .)
    BOOLEAN         reduce using rule 35 (math_first -> math_expr .)
    CBOOLEAN        reduce using rule 35 (math_first -> math_expr .)
    MAP             reduce using rule 35 (math_first -> math_expr .)
    IF              reduce using rule 35 (math_first -> math_expr .)
    WHILE           reduce using rule 35 (math_first -> math_expr .)
    BAR             reduce using rule 35 (math_first -> math_expr .)
    EMP             reduce using rule 35 (math_first -> math_expr .)
    SET             reduce using rule 35 (math_first -> math_expr .)
    CLR             reduce using rule 35 (math_first -> math_expr .)
    PROC            reduce using rule 35 (math_first -> math_expr .)
    BACK            reduce using rule 35 (math_first -> math_expr .)
    RIGHT           reduce using rule 35 (math_first -> math_expr .)
    LEFT            reduce using rule 35 (math_first -> math_expr .)
    DO              reduce using rule 35 (math_first -> math_expr .)
    CLSQBR          reduce using rule 35 (math_first -> math_expr .)


state 111

    (36) math_first -> call_procedure .

    NOT             reduce using rule 36 (math_first -> call_procedure .)
    OR              reduce using rule 36 (math_first -> call_procedure .)
    GT              reduce using rule 36 (math_first -> call_procedure .)
    LT              reduce using rule 36 (math_first -> call_procedure .)
    INC             reduce using rule 36 (math_first -> call_procedure .)
    DEC             reduce using rule 36 (math_first -> call_procedure .)
    VARIABLE        reduce using rule 36 (math_first -> call_procedure .)
    STEP            reduce using rule 36 (math_first -> call_procedure .)
    TRUE            reduce using rule 36 (math_first -> call_procedure .)
    FALSE           reduce using rule 36 (math_first -> call_procedure .)
    LOOK            reduce using rule 36 (math_first -> call_procedure .)
    NUM             reduce using rule 36 (math_first -> call_procedure .)
    EOS             reduce using rule 36 (math_first -> call_procedure .)
    OPBR            reduce using rule 36 (math_first -> call_procedure .)
    error           reduce using rule 36 (math_first -> call_procedure .)
    INT             reduce using rule 36 (math_first -> call_procedure .)
    CINT            reduce using rule 36 (math_first -> call_procedure .)
    BOOLEAN         reduce using rule 36 (math_first -> call_procedure .)
    CBOOLEAN        reduce using rule 36 (math_first -> call_procedure .)
    MAP             reduce using rule 36 (math_first -> call_procedure .)
    IF              reduce using rule 36 (math_first -> call_procedure .)
    WHILE           reduce using rule 36 (math_first -> call_procedure .)
    BAR             reduce using rule 36 (math_first -> call_procedure .)
    EMP             reduce using rule 36 (math_first -> call_procedure .)
    SET             reduce using rule 36 (math_first -> call_procedure .)
    CLR             reduce using rule 36 (math_first -> call_procedure .)
    PROC            reduce using rule 36 (math_first -> call_procedure .)
    BACK            reduce using rule 36 (math_first -> call_procedure .)
    RIGHT           reduce using rule 36 (math_first -> call_procedure .)
    LEFT            reduce using rule 36 (math_first -> call_procedure .)
    DO              reduce using rule 36 (math_first -> call_procedure .)
    CLSQBR          reduce using rule 36 (math_first -> call_procedure .)


state 112

    (30) math_expr -> VARIABLE .
    (50) call_procedure -> VARIABLE . OPSQBR varlist CLSQBR

    NOT             reduce using rule 30 (math_expr -> VARIABLE .)
    OR              reduce using rule 30 (math_expr -> VARIABLE .)
    GT              reduce using rule 30 (math_expr -> VARIABLE .)
    LT              reduce using rule 30 (math_expr -> VARIABLE .)
    INC             reduce using rule 30 (math_expr -> VARIABLE .)
    DEC             reduce using rule 30 (math_expr -> VARIABLE .)
    VARIABLE        reduce using rule 30 (math_expr -> VARIABLE .)
    STEP            reduce using rule 30 (math_expr -> VARIABLE .)
    TRUE            reduce using rule 30 (math_expr -> VARIABLE .)
    FALSE           reduce using rule 30 (math_expr -> VARIABLE .)
    LOOK            reduce using rule 30 (math_expr -> VARIABLE .)
    NUM             reduce using rule 30 (math_expr -> VARIABLE .)
    EOS             reduce using rule 30 (math_expr -> VARIABLE .)
    OPBR            reduce using rule 30 (math_expr -> VARIABLE .)
    error           reduce using rule 30 (math_expr -> VARIABLE .)
    INT             reduce using rule 30 (math_expr -> VARIABLE .)
    CINT            reduce using rule 30 (math_expr -> VARIABLE .)
    BOOLEAN         reduce using rule 30 (math_expr -> VARIABLE .)
    CBOOLEAN        reduce using rule 30 (math_expr -> VARIABLE .)
    MAP             reduce using rule 30 (math_expr -> VARIABLE .)
    IF              reduce using rule 30 (math_expr -> VARIABLE .)
    WHILE           reduce using rule 30 (math_expr -> VARIABLE .)
    BAR             reduce using rule 30 (math_expr -> VARIABLE .)
    EMP             reduce using rule 30 (math_expr -> VARIABLE .)
    SET             reduce using rule 30 (math_expr -> VARIABLE .)
    CLR             reduce using rule 30 (math_expr -> VARIABLE .)
    PROC            reduce using rule 30 (math_expr -> VARIABLE .)
    BACK            reduce using rule 30 (math_expr -> VARIABLE .)
    RIGHT           reduce using rule 30 (math_expr -> VARIABLE .)
    LEFT            reduce using rule 30 (math_expr -> VARIABLE .)
    DO              reduce using rule 30 (math_expr -> VARIABLE .)
    CLSQBR          reduce using rule 30 (math_expr -> VARIABLE .)
    OPSQBR          shift and go to state 47


state 113

    (28) math_expr -> DEC math_first . math_second
    (37) math_second -> . math_first
    (38) math_second -> . logic_expr
    (35) math_first -> . math_expr
    (36) math_first -> . call_procedure
    (39) logic_expr -> . NOT logic_expr
    (40) logic_expr -> . NOT call_procedure
    (41) logic_expr -> . OR or_elem or_elem
    (42) logic_expr -> . GT math_expr math_expr
    (43) logic_expr -> . LT math_expr math_expr
    (44) logic_expr -> . logic_cmd
    (45) logic_expr -> . bool
    (27) math_expr -> . INC math_first math_second
    (28) math_expr -> . DEC math_first math_second
    (29) math_expr -> . math_cmd empty
    (30) math_expr -> . VARIABLE
    (31) math_expr -> . number empty
    (50) call_procedure -> . VARIABLE OPSQBR varlist CLSQBR
    (67) logic_cmd -> . STEP
    (33) bool -> . TRUE
    (34) bool -> . FALSE
    (68) math_cmd -> . LOOK
    (32) number -> . NUM

    NOT             shift and go to state 54
    OR              shift and go to state 55
    GT              shift and go to state 56
    LT              shift and go to state 57
    INC             shift and go to state 77
    DEC             shift and go to state 78
    VARIABLE        shift and go to state 112
    STEP            shift and go to state 33
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    LOOK            shift and go to state 37
    NUM             shift and go to state 81

    math_first                     shift and go to state 135
    math_second                    shift and go to state 138
    logic_expr                     shift and go to state 137
    math_expr                      shift and go to state 110
    call_procedure                 shift and go to state 111
    logic_cmd                      shift and go to state 58
    bool                           shift and go to state 59
    math_cmd                       shift and go to state 79
    number                         shift and go to state 80

state 114

    (29) math_expr -> math_cmd empty .

    EOS             reduce using rule 29 (math_expr -> math_cmd empty .)
    INC             reduce using rule 29 (math_expr -> math_cmd empty .)
    DEC             reduce using rule 29 (math_expr -> math_cmd empty .)
    VARIABLE        reduce using rule 29 (math_expr -> math_cmd empty .)
    LOOK            reduce using rule 29 (math_expr -> math_cmd empty .)
    NUM             reduce using rule 29 (math_expr -> math_cmd empty .)
    NOT             reduce using rule 29 (math_expr -> math_cmd empty .)
    OR              reduce using rule 29 (math_expr -> math_cmd empty .)
    GT              reduce using rule 29 (math_expr -> math_cmd empty .)
    LT              reduce using rule 29 (math_expr -> math_cmd empty .)
    STEP            reduce using rule 29 (math_expr -> math_cmd empty .)
    TRUE            reduce using rule 29 (math_expr -> math_cmd empty .)
    FALSE           reduce using rule 29 (math_expr -> math_cmd empty .)
    OPBR            reduce using rule 29 (math_expr -> math_cmd empty .)
    error           reduce using rule 29 (math_expr -> math_cmd empty .)
    INT             reduce using rule 29 (math_expr -> math_cmd empty .)
    CINT            reduce using rule 29 (math_expr -> math_cmd empty .)
    BOOLEAN         reduce using rule 29 (math_expr -> math_cmd empty .)
    CBOOLEAN        reduce using rule 29 (math_expr -> math_cmd empty .)
    MAP             reduce using rule 29 (math_expr -> math_cmd empty .)
    IF              reduce using rule 29 (math_expr -> math_cmd empty .)
    WHILE           reduce using rule 29 (math_expr -> math_cmd empty .)
    BAR             reduce using rule 29 (math_expr -> math_cmd empty .)
    EMP             reduce using rule 29 (math_expr -> math_cmd empty .)
    SET             reduce using rule 29 (math_expr -> math_cmd empty .)
    CLR             reduce using rule 29 (math_expr -> math_cmd empty .)
    PROC            reduce using rule 29 (math_expr -> math_cmd empty .)
    BACK            reduce using rule 29 (math_expr -> math_cmd empty .)
    RIGHT           reduce using rule 29 (math_expr -> math_cmd empty .)
    LEFT            reduce using rule 29 (math_expr -> math_cmd empty .)
    DO              reduce using rule 29 (math_expr -> math_cmd empty .)
    CLSQBR          reduce using rule 29 (math_expr -> math_cmd empty .)


state 115

    (31) math_expr -> number empty .

    EOS             reduce using rule 31 (math_expr -> number empty .)
    INC             reduce using rule 31 (math_expr -> number empty .)
    DEC             reduce using rule 31 (math_expr -> number empty .)
    VARIABLE        reduce using rule 31 (math_expr -> number empty .)
    LOOK            reduce using rule 31 (math_expr -> number empty .)
    NUM             reduce using rule 31 (math_expr -> number empty .)
    NOT             reduce using rule 31 (math_expr -> number empty .)
    OR              reduce using rule 31 (math_expr -> number empty .)
    GT              reduce using rule 31 (math_expr -> number empty .)
    LT              reduce using rule 31 (math_expr -> number empty .)
    STEP            reduce using rule 31 (math_expr -> number empty .)
    TRUE            reduce using rule 31 (math_expr -> number empty .)
    FALSE           reduce using rule 31 (math_expr -> number empty .)
    OPBR            reduce using rule 31 (math_expr -> number empty .)
    error           reduce using rule 31 (math_expr -> number empty .)
    INT             reduce using rule 31 (math_expr -> number empty .)
    CINT            reduce using rule 31 (math_expr -> number empty .)
    BOOLEAN         reduce using rule 31 (math_expr -> number empty .)
    CBOOLEAN        reduce using rule 31 (math_expr -> number empty .)
    MAP             reduce using rule 31 (math_expr -> number empty .)
    IF              reduce using rule 31 (math_expr -> number empty .)
    WHILE           reduce using rule 31 (math_expr -> number empty .)
    BAR             reduce using rule 31 (math_expr -> number empty .)
    EMP             reduce using rule 31 (math_expr -> number empty .)
    SET             reduce using rule 31 (math_expr -> number empty .)
    CLR             reduce using rule 31 (math_expr -> number empty .)
    PROC            reduce using rule 31 (math_expr -> number empty .)
    BACK            reduce using rule 31 (math_expr -> number empty .)
    RIGHT           reduce using rule 31 (math_expr -> number empty .)
    LEFT            reduce using rule 31 (math_expr -> number empty .)
    DO              reduce using rule 31 (math_expr -> number empty .)
    CLSQBR          reduce using rule 31 (math_expr -> number empty .)


state 116

    (51) varlist -> varlist VARIABLE .

    CLSQBR          reduce using rule 51 (varlist -> varlist VARIABLE .)
    VARIABLE        reduce using rule 51 (varlist -> varlist VARIABLE .)


state 117

    (50) call_procedure -> VARIABLE OPSQBR varlist CLSQBR .

    EOS             reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    OPBR            reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    error           reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    INT             reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    CINT            reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    BOOLEAN         reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    CBOOLEAN        reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    VARIABLE        reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    MAP             reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    IF              reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    WHILE           reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    BAR             reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    EMP             reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    SET             reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    CLR             reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    PROC            reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    STEP            reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    BACK            reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    RIGHT           reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    LEFT            reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    LOOK            reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    DO              reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    NOT             reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    OR              reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    GT              reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    LT              reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    TRUE            reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    FALSE           reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    INC             reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    DEC             reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    NUM             reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)
    CLSQBR          reduce using rule 50 (call_procedure -> VARIABLE OPSQBR varlist CLSQBR .)


state 118

    (21) definition -> CINT VARIABLE EQUAL math_expr .

    EOS             reduce using rule 21 (definition -> CINT VARIABLE EQUAL math_expr .)


state 119

    (22) definition -> BOOLEAN VARIABLE EQUAL logic_expr .

    EOS             reduce using rule 22 (definition -> BOOLEAN VARIABLE EQUAL logic_expr .)


state 120

    (23) definition -> CBOOLEAN VARIABLE EQUAL logic_expr .

    EOS             reduce using rule 23 (definition -> CBOOLEAN VARIABLE EQUAL logic_expr .)


state 121

    (58) if -> IF logic_expr sentence_groups ELSE . sentence_groups
    (2) sentence_groups -> . EOS OPBR EOS sentence_group CLBR EOS
    (3) sentence_groups -> . OPBR EOS sentence_group CLBR EOS
    (4) sentence_groups -> . OPBR EOS sentence_group CLBR
    (5) sentence_groups -> . EOS OPBR EOS sentence_group CLBR
    (6) sentence_groups -> . EOS sentence
    (7) sentence_groups -> . sentence
    (10) sentence -> . definition EOS
    (11) sentence -> . if
    (12) sentence -> . while
    (13) sentence -> . if_err
    (14) sentence -> . while_err
    (15) sentence -> . procedure
    (16) sentence -> . call_procedure EOS
    (17) sentence -> . robot_command EOS
    (18) sentence -> . map_setting EOS
    (19) sentence -> . error
    (20) definition -> . INT VARIABLE EQUAL math_expr
    (21) definition -> . CINT VARIABLE EQUAL math_expr
    (22) definition -> . BOOLEAN VARIABLE EQUAL logic_expr
    (23) definition -> . CBOOLEAN VARIABLE EQUAL logic_expr
    (24) definition -> . VARIABLE ASSIGN math_expr
    (25) definition -> . VARIABLE ASSIGN logic_expr
    (26) definition -> . MAP VARIABLE
    (58) if -> . IF logic_expr sentence_groups ELSE sentence_groups
    (59) if -> . IF logic_expr sentence_groups
    (60) while -> . WHILE logic_expr DO sentence_groups
    (53) if_err -> . IF error sentence_groups ELSE sentence_groups
    (54) if_err -> . IF error sentence_groups
    (55) while_err -> . WHILE error DO sentence_groups
    (56) while_err -> . WHILE error
    (57) while_err -> . WHILE logic_expr error
    (48) procedure -> . proc_name OPSQBR varlist CLSQBR sentence_groups
    (50) call_procedure -> . VARIABLE OPSQBR varlist CLSQBR
    (61) robot_command -> . logic_cmd
    (62) robot_command -> . rot_dir
    (63) robot_command -> . math_cmd
    (69) map_setting -> . BAR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (70) map_setting -> . EMP OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (71) map_setting -> . SET OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (72) map_setting -> . CLR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (49) proc_name -> . PROC VARIABLE
    (67) logic_cmd -> . STEP
    (64) rot_dir -> . BACK
    (65) rot_dir -> . RIGHT
    (66) rot_dir -> . LEFT
    (68) math_cmd -> . LOOK

    EOS             shift and go to state 3
    OPBR            shift and go to state 4
    error           shift and go to state 15
    INT             shift and go to state 16
    CINT            shift and go to state 18
    BOOLEAN         shift and go to state 19
    CBOOLEAN        shift and go to state 20
    VARIABLE        shift and go to state 17
    MAP             shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    BAR             shift and go to state 28
    EMP             shift and go to state 29
    SET             shift and go to state 30
    CLR             shift and go to state 31
    PROC            shift and go to state 32
    STEP            shift and go to state 33
    BACK            shift and go to state 34
    RIGHT           shift and go to state 35
    LEFT            shift and go to state 36
    LOOK            shift and go to state 37

    sentence_groups                shift and go to state 139
    sentence                       shift and go to state 5
    definition                     shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    if_err                         shift and go to state 9
    while_err                      shift and go to state 10
    procedure                      shift and go to state 11
    call_procedure                 shift and go to state 12
    robot_command                  shift and go to state 13
    map_setting                    shift and go to state 14
    proc_name                      shift and go to state 24
    logic_cmd                      shift and go to state 25
    rot_dir                        shift and go to state 26
    math_cmd                       shift and go to state 27

state 122

    (53) if_err -> IF error sentence_groups ELSE . sentence_groups
    (2) sentence_groups -> . EOS OPBR EOS sentence_group CLBR EOS
    (3) sentence_groups -> . OPBR EOS sentence_group CLBR EOS
    (4) sentence_groups -> . OPBR EOS sentence_group CLBR
    (5) sentence_groups -> . EOS OPBR EOS sentence_group CLBR
    (6) sentence_groups -> . EOS sentence
    (7) sentence_groups -> . sentence
    (10) sentence -> . definition EOS
    (11) sentence -> . if
    (12) sentence -> . while
    (13) sentence -> . if_err
    (14) sentence -> . while_err
    (15) sentence -> . procedure
    (16) sentence -> . call_procedure EOS
    (17) sentence -> . robot_command EOS
    (18) sentence -> . map_setting EOS
    (19) sentence -> . error
    (20) definition -> . INT VARIABLE EQUAL math_expr
    (21) definition -> . CINT VARIABLE EQUAL math_expr
    (22) definition -> . BOOLEAN VARIABLE EQUAL logic_expr
    (23) definition -> . CBOOLEAN VARIABLE EQUAL logic_expr
    (24) definition -> . VARIABLE ASSIGN math_expr
    (25) definition -> . VARIABLE ASSIGN logic_expr
    (26) definition -> . MAP VARIABLE
    (58) if -> . IF logic_expr sentence_groups ELSE sentence_groups
    (59) if -> . IF logic_expr sentence_groups
    (60) while -> . WHILE logic_expr DO sentence_groups
    (53) if_err -> . IF error sentence_groups ELSE sentence_groups
    (54) if_err -> . IF error sentence_groups
    (55) while_err -> . WHILE error DO sentence_groups
    (56) while_err -> . WHILE error
    (57) while_err -> . WHILE logic_expr error
    (48) procedure -> . proc_name OPSQBR varlist CLSQBR sentence_groups
    (50) call_procedure -> . VARIABLE OPSQBR varlist CLSQBR
    (61) robot_command -> . logic_cmd
    (62) robot_command -> . rot_dir
    (63) robot_command -> . math_cmd
    (69) map_setting -> . BAR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (70) map_setting -> . EMP OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (71) map_setting -> . SET OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (72) map_setting -> . CLR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (49) proc_name -> . PROC VARIABLE
    (67) logic_cmd -> . STEP
    (64) rot_dir -> . BACK
    (65) rot_dir -> . RIGHT
    (66) rot_dir -> . LEFT
    (68) math_cmd -> . LOOK

    EOS             shift and go to state 3
    OPBR            shift and go to state 4
    error           shift and go to state 15
    INT             shift and go to state 16
    CINT            shift and go to state 18
    BOOLEAN         shift and go to state 19
    CBOOLEAN        shift and go to state 20
    VARIABLE        shift and go to state 17
    MAP             shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    BAR             shift and go to state 28
    EMP             shift and go to state 29
    SET             shift and go to state 30
    CLR             shift and go to state 31
    PROC            shift and go to state 32
    STEP            shift and go to state 33
    BACK            shift and go to state 34
    RIGHT           shift and go to state 35
    LEFT            shift and go to state 36
    LOOK            shift and go to state 37

    sentence_groups                shift and go to state 140
    sentence                       shift and go to state 5
    definition                     shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    if_err                         shift and go to state 9
    while_err                      shift and go to state 10
    procedure                      shift and go to state 11
    call_procedure                 shift and go to state 12
    robot_command                  shift and go to state 13
    map_setting                    shift and go to state 14
    proc_name                      shift and go to state 24
    logic_cmd                      shift and go to state 25
    rot_dir                        shift and go to state 26
    math_cmd                       shift and go to state 27

state 123

    (41) logic_expr -> OR or_elem or_elem .

    EOS             reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    OPBR            reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    error           reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    INT             reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    CINT            reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    BOOLEAN         reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    CBOOLEAN        reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    VARIABLE        reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    MAP             reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    IF              reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    WHILE           reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    BAR             reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    EMP             reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    SET             reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    CLR             reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    PROC            reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    STEP            reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    BACK            reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    RIGHT           reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    LEFT            reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    LOOK            reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    DO              reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    NOT             reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    OR              reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    GT              reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    LT              reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    TRUE            reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    FALSE           reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    INC             reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    DEC             reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    NUM             reduce using rule 41 (logic_expr -> OR or_elem or_elem .)
    CLSQBR          reduce using rule 41 (logic_expr -> OR or_elem or_elem .)


state 124

    (42) logic_expr -> GT math_expr math_expr .

    EOS             reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    OPBR            reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    error           reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    INT             reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    CINT            reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    BOOLEAN         reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    CBOOLEAN        reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    VARIABLE        reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    MAP             reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    IF              reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    WHILE           reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    BAR             reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    EMP             reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    SET             reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    CLR             reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    PROC            reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    STEP            reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    BACK            reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    RIGHT           reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    LEFT            reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    LOOK            reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    DO              reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    NOT             reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    OR              reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    GT              reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    LT              reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    TRUE            reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    FALSE           reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    INC             reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    DEC             reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    NUM             reduce using rule 42 (logic_expr -> GT math_expr math_expr .)
    CLSQBR          reduce using rule 42 (logic_expr -> GT math_expr math_expr .)


state 125

    (43) logic_expr -> LT math_expr math_expr .

    EOS             reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    OPBR            reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    error           reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    INT             reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    CINT            reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    BOOLEAN         reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    CBOOLEAN        reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    VARIABLE        reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    MAP             reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    IF              reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    WHILE           reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    BAR             reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    EMP             reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    SET             reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    CLR             reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    PROC            reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    STEP            reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    BACK            reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    RIGHT           reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    LEFT            reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    LOOK            reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    DO              reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    NOT             reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    OR              reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    GT              reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    LT              reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    TRUE            reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    FALSE           reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    INC             reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    DEC             reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    NUM             reduce using rule 43 (logic_expr -> LT math_expr math_expr .)
    CLSQBR          reduce using rule 43 (logic_expr -> LT math_expr math_expr .)


state 126

    (60) while -> WHILE logic_expr DO sentence_groups .

    $end            reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)
    ELSE            reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)
    CLBR            reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)
    error           reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)
    INT             reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)
    CINT            reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)
    BOOLEAN         reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)
    CBOOLEAN        reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)
    VARIABLE        reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)
    MAP             reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)
    IF              reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)
    WHILE           reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)
    BAR             reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)
    EMP             reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)
    SET             reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)
    CLR             reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)
    PROC            reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)
    STEP            reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)
    BACK            reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)
    RIGHT           reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)
    LEFT            reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)
    LOOK            reduce using rule 60 (while -> WHILE logic_expr DO sentence_groups .)


state 127

    (55) while_err -> WHILE error DO sentence_groups .

    $end            reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)
    ELSE            reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)
    CLBR            reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)
    error           reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)
    INT             reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)
    CINT            reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)
    BOOLEAN         reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)
    CBOOLEAN        reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)
    VARIABLE        reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)
    MAP             reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)
    IF              reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)
    WHILE           reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)
    BAR             reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)
    EMP             reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)
    SET             reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)
    CLR             reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)
    PROC            reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)
    STEP            reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)
    BACK            reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)
    RIGHT           reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)
    LEFT            reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)
    LOOK            reduce using rule 55 (while_err -> WHILE error DO sentence_groups .)


state 128

    (48) procedure -> proc_name OPSQBR varlist CLSQBR . sentence_groups
    (2) sentence_groups -> . EOS OPBR EOS sentence_group CLBR EOS
    (3) sentence_groups -> . OPBR EOS sentence_group CLBR EOS
    (4) sentence_groups -> . OPBR EOS sentence_group CLBR
    (5) sentence_groups -> . EOS OPBR EOS sentence_group CLBR
    (6) sentence_groups -> . EOS sentence
    (7) sentence_groups -> . sentence
    (10) sentence -> . definition EOS
    (11) sentence -> . if
    (12) sentence -> . while
    (13) sentence -> . if_err
    (14) sentence -> . while_err
    (15) sentence -> . procedure
    (16) sentence -> . call_procedure EOS
    (17) sentence -> . robot_command EOS
    (18) sentence -> . map_setting EOS
    (19) sentence -> . error
    (20) definition -> . INT VARIABLE EQUAL math_expr
    (21) definition -> . CINT VARIABLE EQUAL math_expr
    (22) definition -> . BOOLEAN VARIABLE EQUAL logic_expr
    (23) definition -> . CBOOLEAN VARIABLE EQUAL logic_expr
    (24) definition -> . VARIABLE ASSIGN math_expr
    (25) definition -> . VARIABLE ASSIGN logic_expr
    (26) definition -> . MAP VARIABLE
    (58) if -> . IF logic_expr sentence_groups ELSE sentence_groups
    (59) if -> . IF logic_expr sentence_groups
    (60) while -> . WHILE logic_expr DO sentence_groups
    (53) if_err -> . IF error sentence_groups ELSE sentence_groups
    (54) if_err -> . IF error sentence_groups
    (55) while_err -> . WHILE error DO sentence_groups
    (56) while_err -> . WHILE error
    (57) while_err -> . WHILE logic_expr error
    (48) procedure -> . proc_name OPSQBR varlist CLSQBR sentence_groups
    (50) call_procedure -> . VARIABLE OPSQBR varlist CLSQBR
    (61) robot_command -> . logic_cmd
    (62) robot_command -> . rot_dir
    (63) robot_command -> . math_cmd
    (69) map_setting -> . BAR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (70) map_setting -> . EMP OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (71) map_setting -> . SET OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (72) map_setting -> . CLR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR
    (49) proc_name -> . PROC VARIABLE
    (67) logic_cmd -> . STEP
    (64) rot_dir -> . BACK
    (65) rot_dir -> . RIGHT
    (66) rot_dir -> . LEFT
    (68) math_cmd -> . LOOK

    EOS             shift and go to state 3
    OPBR            shift and go to state 4
    error           shift and go to state 15
    INT             shift and go to state 16
    CINT            shift and go to state 18
    BOOLEAN         shift and go to state 19
    CBOOLEAN        shift and go to state 20
    VARIABLE        shift and go to state 17
    MAP             shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    BAR             shift and go to state 28
    EMP             shift and go to state 29
    SET             shift and go to state 30
    CLR             shift and go to state 31
    PROC            shift and go to state 32
    STEP            shift and go to state 33
    BACK            shift and go to state 34
    RIGHT           shift and go to state 35
    LEFT            shift and go to state 36
    LOOK            shift and go to state 37

    proc_name                      shift and go to state 24
    sentence_groups                shift and go to state 141
    sentence                       shift and go to state 5
    definition                     shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    if_err                         shift and go to state 9
    while_err                      shift and go to state 10
    procedure                      shift and go to state 11
    call_procedure                 shift and go to state 12
    robot_command                  shift and go to state 13
    map_setting                    shift and go to state 14
    logic_cmd                      shift and go to state 25
    rot_dir                        shift and go to state 26
    math_cmd                       shift and go to state 27

state 129

    (69) map_setting -> BAR OPSQBR VARIABLE VARIABLE . math_expr math_expr CLSQBR
    (27) math_expr -> . INC math_first math_second
    (28) math_expr -> . DEC math_first math_second
    (29) math_expr -> . math_cmd empty
    (30) math_expr -> . VARIABLE
    (31) math_expr -> . number empty
    (68) math_cmd -> . LOOK
    (32) number -> . NUM

    INC             shift and go to state 77
    DEC             shift and go to state 78
    VARIABLE        shift and go to state 74
    LOOK            shift and go to state 37
    NUM             shift and go to state 81

    math_expr                      shift and go to state 142
    math_cmd                       shift and go to state 79
    number                         shift and go to state 80

state 130

    (70) map_setting -> EMP OPSQBR VARIABLE VARIABLE . math_expr math_expr CLSQBR
    (27) math_expr -> . INC math_first math_second
    (28) math_expr -> . DEC math_first math_second
    (29) math_expr -> . math_cmd empty
    (30) math_expr -> . VARIABLE
    (31) math_expr -> . number empty
    (68) math_cmd -> . LOOK
    (32) number -> . NUM

    INC             shift and go to state 77
    DEC             shift and go to state 78
    VARIABLE        shift and go to state 74
    LOOK            shift and go to state 37
    NUM             shift and go to state 81

    math_expr                      shift and go to state 143
    math_cmd                       shift and go to state 79
    number                         shift and go to state 80

state 131

    (71) map_setting -> SET OPSQBR VARIABLE VARIABLE . math_expr math_expr CLSQBR
    (27) math_expr -> . INC math_first math_second
    (28) math_expr -> . DEC math_first math_second
    (29) math_expr -> . math_cmd empty
    (30) math_expr -> . VARIABLE
    (31) math_expr -> . number empty
    (68) math_cmd -> . LOOK
    (32) number -> . NUM

    INC             shift and go to state 77
    DEC             shift and go to state 78
    VARIABLE        shift and go to state 74
    LOOK            shift and go to state 37
    NUM             shift and go to state 81

    math_expr                      shift and go to state 144
    math_cmd                       shift and go to state 79
    number                         shift and go to state 80

state 132

    (72) map_setting -> CLR OPSQBR VARIABLE VARIABLE . math_expr math_expr CLSQBR
    (27) math_expr -> . INC math_first math_second
    (28) math_expr -> . DEC math_first math_second
    (29) math_expr -> . math_cmd empty
    (30) math_expr -> . VARIABLE
    (31) math_expr -> . number empty
    (68) math_cmd -> . LOOK
    (32) number -> . NUM

    INC             shift and go to state 77
    DEC             shift and go to state 78
    VARIABLE        shift and go to state 74
    LOOK            shift and go to state 37
    NUM             shift and go to state 81

    math_expr                      shift and go to state 145
    math_cmd                       shift and go to state 79
    number                         shift and go to state 80

state 133

    (2) sentence_groups -> EOS OPBR EOS sentence_group CLBR . EOS
    (5) sentence_groups -> EOS OPBR EOS sentence_group CLBR .

    EOS             shift and go to state 146
    $end            reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)
    ELSE            reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)
    CLBR            reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)
    error           reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)
    INT             reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)
    CINT            reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)
    BOOLEAN         reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)
    CBOOLEAN        reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)
    VARIABLE        reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)
    MAP             reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)
    IF              reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)
    WHILE           reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)
    BAR             reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)
    EMP             reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)
    SET             reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)
    CLR             reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)
    PROC            reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)
    STEP            reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)
    BACK            reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)
    RIGHT           reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)
    LEFT            reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)
    LOOK            reduce using rule 5 (sentence_groups -> EOS OPBR EOS sentence_group CLBR .)


state 134

    (3) sentence_groups -> OPBR EOS sentence_group CLBR EOS .

    $end            reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)
    ELSE            reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)
    CLBR            reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)
    error           reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)
    INT             reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)
    CINT            reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)
    BOOLEAN         reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)
    CBOOLEAN        reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)
    VARIABLE        reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)
    MAP             reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)
    IF              reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)
    WHILE           reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)
    BAR             reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)
    EMP             reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)
    SET             reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)
    CLR             reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)
    PROC            reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)
    STEP            reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)
    BACK            reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)
    RIGHT           reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)
    LEFT            reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)
    LOOK            reduce using rule 3 (sentence_groups -> OPBR EOS sentence_group CLBR EOS .)


state 135

    (37) math_second -> math_first .

    EOS             reduce using rule 37 (math_second -> math_first .)
    OPBR            reduce using rule 37 (math_second -> math_first .)
    error           reduce using rule 37 (math_second -> math_first .)
    INT             reduce using rule 37 (math_second -> math_first .)
    CINT            reduce using rule 37 (math_second -> math_first .)
    BOOLEAN         reduce using rule 37 (math_second -> math_first .)
    CBOOLEAN        reduce using rule 37 (math_second -> math_first .)
    VARIABLE        reduce using rule 37 (math_second -> math_first .)
    MAP             reduce using rule 37 (math_second -> math_first .)
    IF              reduce using rule 37 (math_second -> math_first .)
    WHILE           reduce using rule 37 (math_second -> math_first .)
    BAR             reduce using rule 37 (math_second -> math_first .)
    EMP             reduce using rule 37 (math_second -> math_first .)
    SET             reduce using rule 37 (math_second -> math_first .)
    CLR             reduce using rule 37 (math_second -> math_first .)
    PROC            reduce using rule 37 (math_second -> math_first .)
    STEP            reduce using rule 37 (math_second -> math_first .)
    BACK            reduce using rule 37 (math_second -> math_first .)
    RIGHT           reduce using rule 37 (math_second -> math_first .)
    LEFT            reduce using rule 37 (math_second -> math_first .)
    LOOK            reduce using rule 37 (math_second -> math_first .)
    DO              reduce using rule 37 (math_second -> math_first .)
    NOT             reduce using rule 37 (math_second -> math_first .)
    OR              reduce using rule 37 (math_second -> math_first .)
    GT              reduce using rule 37 (math_second -> math_first .)
    LT              reduce using rule 37 (math_second -> math_first .)
    TRUE            reduce using rule 37 (math_second -> math_first .)
    FALSE           reduce using rule 37 (math_second -> math_first .)
    INC             reduce using rule 37 (math_second -> math_first .)
    DEC             reduce using rule 37 (math_second -> math_first .)
    NUM             reduce using rule 37 (math_second -> math_first .)
    CLSQBR          reduce using rule 37 (math_second -> math_first .)


state 136

    (27) math_expr -> INC math_first math_second .

    EOS             reduce using rule 27 (math_expr -> INC math_first math_second .)
    INC             reduce using rule 27 (math_expr -> INC math_first math_second .)
    DEC             reduce using rule 27 (math_expr -> INC math_first math_second .)
    VARIABLE        reduce using rule 27 (math_expr -> INC math_first math_second .)
    LOOK            reduce using rule 27 (math_expr -> INC math_first math_second .)
    NUM             reduce using rule 27 (math_expr -> INC math_first math_second .)
    NOT             reduce using rule 27 (math_expr -> INC math_first math_second .)
    OR              reduce using rule 27 (math_expr -> INC math_first math_second .)
    GT              reduce using rule 27 (math_expr -> INC math_first math_second .)
    LT              reduce using rule 27 (math_expr -> INC math_first math_second .)
    STEP            reduce using rule 27 (math_expr -> INC math_first math_second .)
    TRUE            reduce using rule 27 (math_expr -> INC math_first math_second .)
    FALSE           reduce using rule 27 (math_expr -> INC math_first math_second .)
    OPBR            reduce using rule 27 (math_expr -> INC math_first math_second .)
    error           reduce using rule 27 (math_expr -> INC math_first math_second .)
    INT             reduce using rule 27 (math_expr -> INC math_first math_second .)
    CINT            reduce using rule 27 (math_expr -> INC math_first math_second .)
    BOOLEAN         reduce using rule 27 (math_expr -> INC math_first math_second .)
    CBOOLEAN        reduce using rule 27 (math_expr -> INC math_first math_second .)
    MAP             reduce using rule 27 (math_expr -> INC math_first math_second .)
    IF              reduce using rule 27 (math_expr -> INC math_first math_second .)
    WHILE           reduce using rule 27 (math_expr -> INC math_first math_second .)
    BAR             reduce using rule 27 (math_expr -> INC math_first math_second .)
    EMP             reduce using rule 27 (math_expr -> INC math_first math_second .)
    SET             reduce using rule 27 (math_expr -> INC math_first math_second .)
    CLR             reduce using rule 27 (math_expr -> INC math_first math_second .)
    PROC            reduce using rule 27 (math_expr -> INC math_first math_second .)
    BACK            reduce using rule 27 (math_expr -> INC math_first math_second .)
    RIGHT           reduce using rule 27 (math_expr -> INC math_first math_second .)
    LEFT            reduce using rule 27 (math_expr -> INC math_first math_second .)
    DO              reduce using rule 27 (math_expr -> INC math_first math_second .)
    CLSQBR          reduce using rule 27 (math_expr -> INC math_first math_second .)


state 137

    (38) math_second -> logic_expr .

    EOS             reduce using rule 38 (math_second -> logic_expr .)
    OPBR            reduce using rule 38 (math_second -> logic_expr .)
    error           reduce using rule 38 (math_second -> logic_expr .)
    INT             reduce using rule 38 (math_second -> logic_expr .)
    CINT            reduce using rule 38 (math_second -> logic_expr .)
    BOOLEAN         reduce using rule 38 (math_second -> logic_expr .)
    CBOOLEAN        reduce using rule 38 (math_second -> logic_expr .)
    VARIABLE        reduce using rule 38 (math_second -> logic_expr .)
    MAP             reduce using rule 38 (math_second -> logic_expr .)
    IF              reduce using rule 38 (math_second -> logic_expr .)
    WHILE           reduce using rule 38 (math_second -> logic_expr .)
    BAR             reduce using rule 38 (math_second -> logic_expr .)
    EMP             reduce using rule 38 (math_second -> logic_expr .)
    SET             reduce using rule 38 (math_second -> logic_expr .)
    CLR             reduce using rule 38 (math_second -> logic_expr .)
    PROC            reduce using rule 38 (math_second -> logic_expr .)
    STEP            reduce using rule 38 (math_second -> logic_expr .)
    BACK            reduce using rule 38 (math_second -> logic_expr .)
    RIGHT           reduce using rule 38 (math_second -> logic_expr .)
    LEFT            reduce using rule 38 (math_second -> logic_expr .)
    LOOK            reduce using rule 38 (math_second -> logic_expr .)
    DO              reduce using rule 38 (math_second -> logic_expr .)
    NOT             reduce using rule 38 (math_second -> logic_expr .)
    OR              reduce using rule 38 (math_second -> logic_expr .)
    GT              reduce using rule 38 (math_second -> logic_expr .)
    LT              reduce using rule 38 (math_second -> logic_expr .)
    TRUE            reduce using rule 38 (math_second -> logic_expr .)
    FALSE           reduce using rule 38 (math_second -> logic_expr .)
    INC             reduce using rule 38 (math_second -> logic_expr .)
    DEC             reduce using rule 38 (math_second -> logic_expr .)
    NUM             reduce using rule 38 (math_second -> logic_expr .)
    CLSQBR          reduce using rule 38 (math_second -> logic_expr .)


state 138

    (28) math_expr -> DEC math_first math_second .

    EOS             reduce using rule 28 (math_expr -> DEC math_first math_second .)
    INC             reduce using rule 28 (math_expr -> DEC math_first math_second .)
    DEC             reduce using rule 28 (math_expr -> DEC math_first math_second .)
    VARIABLE        reduce using rule 28 (math_expr -> DEC math_first math_second .)
    LOOK            reduce using rule 28 (math_expr -> DEC math_first math_second .)
    NUM             reduce using rule 28 (math_expr -> DEC math_first math_second .)
    NOT             reduce using rule 28 (math_expr -> DEC math_first math_second .)
    OR              reduce using rule 28 (math_expr -> DEC math_first math_second .)
    GT              reduce using rule 28 (math_expr -> DEC math_first math_second .)
    LT              reduce using rule 28 (math_expr -> DEC math_first math_second .)
    STEP            reduce using rule 28 (math_expr -> DEC math_first math_second .)
    TRUE            reduce using rule 28 (math_expr -> DEC math_first math_second .)
    FALSE           reduce using rule 28 (math_expr -> DEC math_first math_second .)
    OPBR            reduce using rule 28 (math_expr -> DEC math_first math_second .)
    error           reduce using rule 28 (math_expr -> DEC math_first math_second .)
    INT             reduce using rule 28 (math_expr -> DEC math_first math_second .)
    CINT            reduce using rule 28 (math_expr -> DEC math_first math_second .)
    BOOLEAN         reduce using rule 28 (math_expr -> DEC math_first math_second .)
    CBOOLEAN        reduce using rule 28 (math_expr -> DEC math_first math_second .)
    MAP             reduce using rule 28 (math_expr -> DEC math_first math_second .)
    IF              reduce using rule 28 (math_expr -> DEC math_first math_second .)
    WHILE           reduce using rule 28 (math_expr -> DEC math_first math_second .)
    BAR             reduce using rule 28 (math_expr -> DEC math_first math_second .)
    EMP             reduce using rule 28 (math_expr -> DEC math_first math_second .)
    SET             reduce using rule 28 (math_expr -> DEC math_first math_second .)
    CLR             reduce using rule 28 (math_expr -> DEC math_first math_second .)
    PROC            reduce using rule 28 (math_expr -> DEC math_first math_second .)
    BACK            reduce using rule 28 (math_expr -> DEC math_first math_second .)
    RIGHT           reduce using rule 28 (math_expr -> DEC math_first math_second .)
    LEFT            reduce using rule 28 (math_expr -> DEC math_first math_second .)
    DO              reduce using rule 28 (math_expr -> DEC math_first math_second .)
    CLSQBR          reduce using rule 28 (math_expr -> DEC math_first math_second .)


state 139

    (58) if -> IF logic_expr sentence_groups ELSE sentence_groups .

    $end            reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)
    ELSE            reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)
    CLBR            reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)
    error           reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)
    INT             reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)
    CINT            reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)
    BOOLEAN         reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)
    CBOOLEAN        reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)
    VARIABLE        reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)
    MAP             reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)
    IF              reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)
    WHILE           reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)
    BAR             reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)
    EMP             reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)
    SET             reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)
    CLR             reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)
    PROC            reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)
    STEP            reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)
    BACK            reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)
    RIGHT           reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)
    LEFT            reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)
    LOOK            reduce using rule 58 (if -> IF logic_expr sentence_groups ELSE sentence_groups .)


state 140

    (53) if_err -> IF error sentence_groups ELSE sentence_groups .

    $end            reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)
    ELSE            reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)
    CLBR            reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)
    error           reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)
    INT             reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)
    CINT            reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)
    BOOLEAN         reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)
    CBOOLEAN        reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)
    VARIABLE        reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)
    MAP             reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)
    IF              reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)
    WHILE           reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)
    BAR             reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)
    EMP             reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)
    SET             reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)
    CLR             reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)
    PROC            reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)
    STEP            reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)
    BACK            reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)
    RIGHT           reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)
    LEFT            reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)
    LOOK            reduce using rule 53 (if_err -> IF error sentence_groups ELSE sentence_groups .)


state 141

    (48) procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .

    $end            reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)
    ELSE            reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)
    CLBR            reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)
    error           reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)
    INT             reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)
    CINT            reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)
    BOOLEAN         reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)
    CBOOLEAN        reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)
    VARIABLE        reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)
    MAP             reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)
    IF              reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)
    WHILE           reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)
    BAR             reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)
    EMP             reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)
    SET             reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)
    CLR             reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)
    PROC            reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)
    STEP            reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)
    BACK            reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)
    RIGHT           reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)
    LEFT            reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)
    LOOK            reduce using rule 48 (procedure -> proc_name OPSQBR varlist CLSQBR sentence_groups .)


state 142

    (69) map_setting -> BAR OPSQBR VARIABLE VARIABLE math_expr . math_expr CLSQBR
    (27) math_expr -> . INC math_first math_second
    (28) math_expr -> . DEC math_first math_second
    (29) math_expr -> . math_cmd empty
    (30) math_expr -> . VARIABLE
    (31) math_expr -> . number empty
    (68) math_cmd -> . LOOK
    (32) number -> . NUM

    INC             shift and go to state 77
    DEC             shift and go to state 78
    VARIABLE        shift and go to state 74
    LOOK            shift and go to state 37
    NUM             shift and go to state 81

    math_expr                      shift and go to state 147
    math_cmd                       shift and go to state 79
    number                         shift and go to state 80

state 143

    (70) map_setting -> EMP OPSQBR VARIABLE VARIABLE math_expr . math_expr CLSQBR
    (27) math_expr -> . INC math_first math_second
    (28) math_expr -> . DEC math_first math_second
    (29) math_expr -> . math_cmd empty
    (30) math_expr -> . VARIABLE
    (31) math_expr -> . number empty
    (68) math_cmd -> . LOOK
    (32) number -> . NUM

    INC             shift and go to state 77
    DEC             shift and go to state 78
    VARIABLE        shift and go to state 74
    LOOK            shift and go to state 37
    NUM             shift and go to state 81

    math_expr                      shift and go to state 148
    math_cmd                       shift and go to state 79
    number                         shift and go to state 80

state 144

    (71) map_setting -> SET OPSQBR VARIABLE VARIABLE math_expr . math_expr CLSQBR
    (27) math_expr -> . INC math_first math_second
    (28) math_expr -> . DEC math_first math_second
    (29) math_expr -> . math_cmd empty
    (30) math_expr -> . VARIABLE
    (31) math_expr -> . number empty
    (68) math_cmd -> . LOOK
    (32) number -> . NUM

    INC             shift and go to state 77
    DEC             shift and go to state 78
    VARIABLE        shift and go to state 74
    LOOK            shift and go to state 37
    NUM             shift and go to state 81

    math_expr                      shift and go to state 149
    math_cmd                       shift and go to state 79
    number                         shift and go to state 80

state 145

    (72) map_setting -> CLR OPSQBR VARIABLE VARIABLE math_expr . math_expr CLSQBR
    (27) math_expr -> . INC math_first math_second
    (28) math_expr -> . DEC math_first math_second
    (29) math_expr -> . math_cmd empty
    (30) math_expr -> . VARIABLE
    (31) math_expr -> . number empty
    (68) math_cmd -> . LOOK
    (32) number -> . NUM

    INC             shift and go to state 77
    DEC             shift and go to state 78
    VARIABLE        shift and go to state 74
    LOOK            shift and go to state 37
    NUM             shift and go to state 81

    math_expr                      shift and go to state 150
    math_cmd                       shift and go to state 79
    number                         shift and go to state 80

state 146

    (2) sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .

    $end            reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)
    ELSE            reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)
    CLBR            reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)
    error           reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)
    INT             reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)
    CINT            reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)
    BOOLEAN         reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)
    CBOOLEAN        reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)
    VARIABLE        reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)
    MAP             reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)
    IF              reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)
    WHILE           reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)
    BAR             reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)
    EMP             reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)
    SET             reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)
    CLR             reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)
    PROC            reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)
    STEP            reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)
    BACK            reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)
    RIGHT           reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)
    LEFT            reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)
    LOOK            reduce using rule 2 (sentence_groups -> EOS OPBR EOS sentence_group CLBR EOS .)


state 147

    (69) map_setting -> BAR OPSQBR VARIABLE VARIABLE math_expr math_expr . CLSQBR

    CLSQBR          shift and go to state 151


state 148

    (70) map_setting -> EMP OPSQBR VARIABLE VARIABLE math_expr math_expr . CLSQBR

    CLSQBR          shift and go to state 152


state 149

    (71) map_setting -> SET OPSQBR VARIABLE VARIABLE math_expr math_expr . CLSQBR

    CLSQBR          shift and go to state 153


state 150

    (72) map_setting -> CLR OPSQBR VARIABLE VARIABLE math_expr math_expr . CLSQBR

    CLSQBR          shift and go to state 154


state 151

    (69) map_setting -> BAR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR .

    EOS             reduce using rule 69 (map_setting -> BAR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR .)


state 152

    (70) map_setting -> EMP OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR .

    EOS             reduce using rule 70 (map_setting -> EMP OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR .)


state 153

    (71) map_setting -> SET OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR .

    EOS             reduce using rule 71 (map_setting -> SET OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR .)


state 154

    (72) map_setting -> CLR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR .

    EOS             reduce using rule 72 (map_setting -> CLR OPSQBR VARIABLE VARIABLE math_expr math_expr CLSQBR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 87 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 88 resolved as shift
